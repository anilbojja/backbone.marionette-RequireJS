{"ts":1348154538888,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"MyApp.LibraryApp = function(){\n  var LibraryApp = {};\n\n  var Layout = Backbone.Marionette.Layout.extend({\n    template: \"#library-layout\",\n\n    regions: {\n      search: \"#searchBar\",\n      books: \"#bookContainer\"\n    }\n  });\n\n  var Book = Backbone.Model.extend();\n\n  var Books = Backbone.Collection.extend({\n    model: Book,\n\n    initialize: function(){\n      var self = this;\n      _.bindAll(this, \"search\", \"moreBooks\");\n      MyApp.vent.on(\"search:term\", function(term){ self.search(term); });\n      MyApp.vent.on(\"search:more\", function(){ self.moreBooks(); });\n\n      // the number of books we fetch each time\n      this.maxResults = 40;\n      // the results \"page\" we last fetched\n      this.page = 0;\n\n      // flags whether the collection is currently in the process of fetching\n      // more results from the API (to avoid multiple simultaneous calls\n      this.loading = false;\n\n      // remember the previous search\n      this.previousSearch = null;\n      // the maximum number of results for the previous search\n      this.totalItems = null;\n    },\n\n    search: function(searchTerm){\n      this.page = 0;\n\n      var self = this;\n      this.fetchBooks(searchTerm, function(books){\n        if(books.length < 1){\n          MyApp.vent.trigger(\"search:noResults\");\n        }\n        else{\n          self.reset(books);\n        }\n      });\n\n      this.previousSearch = searchTerm;\n    },\n\n    moreBooks: function(){\n      // if we've loaded all the books for this search, there are no more to load !\n      if(this.length >= this.totalItems){\n        return true;\n      }\n\n      var self = this;\n      this.fetchBooks(this.previousSearch, function(books){ self.add(books); });\n    },\n\n    fetchBooks: function(searchTerm, callback){\n      if(this.loading) return true;\n\n      this.loading = true;\n\n      var self = this;\n      MyApp.vent.trigger(\"search:start\");\n\n      var query = encodeURIComponent(searchTerm)+'&maxResults='+this.maxResults+'&startIndex='+(this.page * this.maxResults)+'&fields=totalItems,items(id,volumeInfo/title,volumeInfo/subtitle,volumeInfo/authors,volumeInfo/publishedDate,volumeInfo/description,volumeInfo/imageLinks)';\n\n      $.ajax({\n        url: 'https://www.googleapis.com/books/v1/volumes',\n        dataType: 'jsonp',\n        data: 'q='+query,\n        success: function (res) {\n          MyApp.vent.trigger(\"search:stop\");\n          if(res.totalItems == 0){\n            callback([]);\n            return [];\n          }\n          if(res.items){\n            self.page++;\n            self.totalItems = res.totalItems;\n            var searchResults = [];\n            _.each(res.items, function(item){\n              var thumbnail = null;\n              if(item.volumeInfo && item.volumeInfo.imageLinks && item.volumeInfo.imageLinks.thumbnail){\n                thumbnail = item.volumeInfo.imageLinks.thumbnail;\n              }\n              searchResults[searchResults.length] = new Book({\n                thumbnail: thumbnail,\n                title: item.volumeInfo.title,\n                subtitle: item.volumeInfo.subtitle,\n                description: item.volumeInfo.description,\n                googleId: item.id\n              });\n            });\n            callback(searchResults);\n            self.loading = false;\n            return searchResults;\n          }\n          else if (res.error) {\n            MyApp.vent.trigger(\"search:error\");\n            self.loading = false;\n          }\n        }\n      });\n    }\n  });\n\n  LibraryApp.Books = new Books();\n\n  LibraryApp.initializeLayout = function(){\n    LibraryApp.layout = new Layout();\n\n    LibraryApp.layout.on(\"show\", function(){\n      MyApp.vent.trigger(\"layout:rendered\");\n    });\n    MyApp.content.show(MyApp.LibraryApp.layout);\n  };\n\n  LibraryApp.search = function(term){\n    LibraryApp.initializeLayout();\n    MyApp.LibraryApp.BookList.showBooks(LibraryApp.Books);\n\n    MyApp.vent.trigger(\"search:term\", term);\n  };\n\n  LibraryApp.defaultSearch = function(){\n    LibraryApp.search(LibraryApp.Books.previousSearch || 'BackboneJS');\n  };\n\n  return LibraryApp;\n}();\n"]],"start1":0,"start2":0,"length1":0,"length2":4057}]],"length":4057}
