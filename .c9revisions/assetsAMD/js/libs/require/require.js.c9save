{"ts":1341979209581,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/** vim: et:ts=4:sw=4:sts=4\r\n * @license RequireJS 2.0.4 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.\r\n * Available via the MIT or new BSD license.\r\n * see: http://github.com/jrburke/requirejs for details\r\n */\r\n/*jslint regexp: true, nomen: true */\r\n/*global window, navigator, document, importScripts, jQuery, setTimeout, opera */\r\n\r\nvar requirejs, require, define;\r\n(function (global) {\r\n    'use strict';\r\n\r\n    var version = '2.0.4',\r\n        commentRegExp = /(\\/\\*([\\s\\S]*?)\\*\\/|([^:]|^)\\/\\/(.*)$)/mg,\r\n        cjsRequireRegExp = /[^.]\\s*require\\s*\\(\\s*[\"']([^'\"\\s]+)[\"']\\s*\\)/g,\r\n        jsSuffixRegExp = /\\.js$/,\r\n        currDirRegExp = /^\\.\\//,\r\n        ostring = Object.prototype.toString,\r\n        ap = Array.prototype,\r\n        aps = ap.slice,\r\n        apsp = ap.splice,\r\n        isBrowser = !!(typeof window !== 'undefined' && navigator && document),\r\n        isWebWorker = !isBrowser && typeof importScripts !== 'undefined',\r\n        //PS3 indicates loaded and complete, but need to wait for complete\r\n        //specifically. Sequence is 'loading', 'loaded', execution,\r\n        // then 'complete'. The UA check is unfortunate, but not sure how\r\n        //to feature test w/o causing perf issues.\r\n        readyRegExp = isBrowser && navigator.platform === 'PLAYSTATION 3' ?\r\n                      /^complete$/ : /^(complete|loaded)$/,\r\n        defContextName = '_',\r\n        //Oh the tragedy, detecting opera. See the usage of isOpera for reason.\r\n        isOpera = typeof opera !== 'undefined' && opera.toString() === '[object Opera]',\r\n        contexts = {},\r\n        cfg = {},\r\n        globalDefQueue = [],\r\n        useInteractive = false,\r\n        req, s, head, baseElement, dataMain, src,\r\n        interactiveScript, currentlyAddingScript, mainScript, subPath;\r\n\r\n    function isFunction(it) {\r\n        return ostring.call(it) === '[object Function]';\r\n    }\r\n\r\n    function isArray(it) {\r\n        return ostring.call(it) === '[object Array]';\r\n    }\r\n\r\n    /**\r\n     * Helper function for iterating over an array. If the func returns\r\n     * a true value, it will break out of the loop.\r\n     */\r\n    function each(ary, func) {\r\n        if (ary) {\r\n            var i;\r\n            for (i = 0; i < ary.length; i += 1) {\r\n                if (ary[i] && func(ary[i], i, ary)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper function for iterating over an array backwards. If the func\r\n     * returns a true value, it will break out of the loop.\r\n     */\r\n    function eachReverse(ary, func) {\r\n        if (ary) {\r\n            var i;\r\n            for (i = ary.length - 1; i > -1; i -= 1) {\r\n                if (ary[i] && func(ary[i], i, ary)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function hasProp(obj, prop) {\r\n        return obj.hasOwnProperty(prop);\r\n    }\r\n\r\n    /**\r\n     * Cycles over properties in an object and calls a function for each\r\n     * property value. If the function returns a truthy value, then the\r\n     * iteration is stopped.\r\n     */\r\n    function eachProp(obj, func) {\r\n        var prop;\r\n        for (prop in obj) {\r\n            if (obj.hasOwnProperty(prop)) {\r\n                if (func(obj[prop], prop)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Simple function to mix in properties from source into target,\r\n     * but only if target does not already have a property of the same name.\r\n     * This is not robust in IE for transferring methods that match\r\n     * Object.prototype names, but the uses of mixin here seem unlikely to\r\n     * trigger a problem related to that.\r\n     */\r\n    function mixin(target, source, force, deepStringMixin) {\r\n        if (source) {\r\n            eachProp(source, function (value, prop) {\r\n                if (force || !hasProp(target, prop)) {\r\n                    if (deepStringMixin && typeof value !== 'string') {\r\n                        if (!target[prop]) {\r\n                            target[prop] = {};\r\n                        }\r\n                        mixin(target[prop], value, force, deepStringMixin);\r\n                    } else {\r\n                        target[prop] = value;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        return target;\r\n    }\r\n\r\n    //Similar to Function.prototype.bind, but the 'this' object is specified\r\n    //first, since it is easier to read/figure out what 'this' will be.\r\n    function bind(obj, fn) {\r\n        return function () {\r\n            return fn.apply(obj, arguments);\r\n        };\r\n    }\r\n\r\n    function scripts() {\r\n        return document.getElementsByTagName('script');\r\n    }\r\n\r\n    //Allow getting a global that expressed in\r\n    //dot notation, like 'a.b.c'.\r\n    function getGlobal(value) {\r\n        if (!value) {\r\n            return value;\r\n        }\r\n        var g = global;\r\n        each(value.split('.'), function (part) {\r\n            g = g[part];\r\n        });\r\n        return g;\r\n    }\r\n\r\n    function makeContextModuleFunc(func, relMap, enableBuildCallback) {\r\n        return function () {\r\n            //A version of a require function that passes a moduleName\r\n            //value for items that may need to\r\n            //look up paths relative to the moduleName\r\n            var args = aps.call(arguments, 0), lastArg;\r\n            if (enableBuildCallback &&\r\n                isFunction((lastArg = args[args.length - 1]))) {\r\n                lastArg.__requireJsBuild = true;\r\n            }\r\n            args.push(relMap);\r\n            return func.apply(null, args);\r\n        };\r\n    }\r\n\r\n    function addRequireMethods(req, context, relMap) {\r\n        each([\r\n            ['toUrl'],\r\n            ['undef'],\r\n            ['defined', 'requireDefined'],\r\n            ['specified', 'requireSpecified']\r\n        ], function (item) {\r\n            var prop = item[1] || item[0];\r\n            req[item[0]] = context ? makeContextModuleFunc(context[prop], relMap) :\r\n                //If no context, then use default context. Reference from\r\n                //contexts instead of early binding to default context, so\r\n                //that during builds, the latest instance of the default\r\n                //context with its config gets used.\r\n                function () {\r\n                    var ctx = contexts[defContextName];\r\n                    return ctx[prop].apply(ctx, arguments);\r\n                };\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Constructs an error with a pointer to an URL with more information.\r\n     * @param {String} id the error ID that maps to an ID on a web page.\r\n     * @param {String} message human readable error.\r\n     * @param {Error} [err] the original error, if there is one.\r\n     *\r\n     * @returns {Error}\r\n     */\r\n    function makeError(id, msg, err, requireModules) {\r\n        var e = new Error(msg + '\\nhttp://requirejs.org/docs/errors.html#' + id);\r\n        e.requireType = id;\r\n        e.requireModules = requireModules;\r\n        if (err) {\r\n            e.originalError = err;\r\n        }\r\n        return e;\r\n    }\r\n\r\n    if (typeof define !== 'undefined') {\r\n        //If a define is already in play via another AMD loader,\r\n        //do not overwrite.\r\n        return;\r\n    }\r\n\r\n    if (typeof requirejs !== 'undefined') {\r\n        if (isFunction(requirejs)) {\r\n            //Do not overwrite and existing requirejs instance.\r\n            return;\r\n        }\r\n        cfg = requirejs;\r\n        requirejs = undefined;\r\n    }\r\n\r\n    //Allow for a require config object\r\n    if (typeof require !== 'undefined' && !isFunction(require)) {\r\n        //assume it is a config object.\r\n        cfg = require;\r\n        require = undefined;\r\n    }\r\n\r\n    function newContext(contextName) {\r\n        var config = {\r\n                waitSeconds: 7,\r\n                baseUrl: './',\r\n                paths: {},\r\n                pkgs: {},\r\n                shim: {}\r\n            },\r\n            registry = {},\r\n            undefEvents = {},\r\n            defQueue = [],\r\n            defined = {},\r\n            urlFetched = {},\r\n            requireCounter = 1,\r\n            unnormalizedCounter = 1,\r\n            //Used to track the order in which modules\r\n            //should be executed, by the order they\r\n            //load. Important for consistent cycle resolution\r\n            //behavior.\r\n            waitAry = [],\r\n            inCheckLoaded, Module, context, handlers,\r\n            checkLoadedTimeoutId;\r\n\r\n        /**\r\n         * Trims the . and .. from an array of path segments.\r\n         * It will keep a leading path segment if a .. will become\r\n         * the first path segment, to help with module name lookups,\r\n         * which act like paths, but can be remapped. But the end result,\r\n         * all paths that use this function should look normalized.\r\n         * NOTE: this method MODIFIES the input array.\r\n         * @param {Array} ary the array of path segments.\r\n         */\r\n        function trimDots(ary) {\r\n            var i, part;\r\n            for (i = 0; ary[i]; i+= 1) {\r\n                part = ary[i];\r\n                if (part === '.') {\r\n                    ary.splice(i, 1);\r\n                    i -= 1;\r\n                } else if (part === '..') {\r\n                    if (i === 1 && (ary[2] === '..' || ary[0] === '..')) {\r\n                        //End of the line. Keep at least one non-dot\r\n                        //path segment at the front so it can be mapped\r\n                        //correctly to disk. Otherwise, there is likely\r\n                        //no path mapping for a path starting with '..'.\r\n                        //This can still fail, but catches the most reasonable\r\n                        //uses of ..\r\n                        break;\r\n                    } else if (i > 0) {\r\n                        ary.splice(i - 1, 2);\r\n                        i -= 2;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Given a relative module name, like ./something, normalize it to\r\n         * a real name that can be mapped to a path.\r\n         * @param {String} name the relative name\r\n         * @param {String} baseName a real name that the name arg is relative\r\n         * to.\r\n         * @param {Boolean} applyMap apply the map config to the value. Should\r\n         * only be done if this normalization is for a dependency ID.\r\n         * @returns {String} normalized name\r\n         */\r\n        function normalize(name, baseName, applyMap) {\r\n            var baseParts = baseName && baseName.split('/'),\r\n                normalizedBaseParts = baseParts,\r\n                map = config.map,\r\n                starMap = map && map['*'],\r\n                pkgName, pkgConfig, mapValue, nameParts, i, j, nameSegment,\r\n                foundMap;\r\n\r\n            //Adjust any relative paths.\r\n            if (name && name.charAt(0) === '.') {\r\n                //If have a base name, try to normalize against it,\r\n                //otherwise, assume it is a top-level require that will\r\n                //be relative to baseUrl in the end.\r\n                if (baseName) {\r\n                    if (config.pkgs[baseName]) {\r\n                        //If the baseName is a package name, then just treat it as one\r\n                        //name to concat the name with.\r\n                        normalizedBaseParts = baseParts = [baseName];\r\n                    } else {\r\n                        //Convert baseName to array, and lop off the last part,\r\n                        //so that . matches that 'directory' and not name of the baseName's\r\n                        //module. For instance, baseName of 'one/two/three', maps to\r\n                        //'one/two/three.js', but we want the directory, 'one/two' for\r\n                        //this normalization.\r\n                        normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);\r\n                    }\r\n\r\n                    name = normalizedBaseParts.concat(name.split('/'));\r\n                    trimDots(name);\r\n\r\n                    //Some use of packages may use a . path to reference the\r\n                    //'main' module name, so normalize for that.\r\n                    pkgConfig = config.pkgs[(pkgName = name[0])];\r\n                    name = name.join('/');\r\n                    if (pkgConfig && name === pkgName + '/' + pkgConfig.main) {\r\n                        name = pkgName;\r\n                    }\r\n                } else if (name.indexOf('./') === 0) {\r\n                    // No baseName, so this is ID is resolved relative\r\n                    // to baseUrl, pull off the leading dot.\r\n                    name = name.substring(2);\r\n                }\r\n            }\r\n\r\n            //Apply map config if available.\r\n            if (applyMap && (baseParts || starMap) && map) {\r\n                nameParts = name.split('/');\r\n\r\n                for (i = nameParts.length; i > 0; i -= 1) {\r\n                    nameSegment = nameParts.slice(0, i).join('/');\r\n\r\n                    if (baseParts) {\r\n                        //Find the longest baseName segment match in the config.\r\n                        //So, do joins on the biggest to smallest lengths of baseParts.\r\n                        for (j = baseParts.length; j > 0; j -= 1) {\r\n                            mapValue = map[baseParts.slice(0, j).join('/')];\r\n\r\n                            //baseName segment has  config, find if it has one for\r\n                            //this name.\r\n                            if (mapValue) {\r\n                                mapValue = mapValue[nameSegment];\r\n                                if (mapValue) {\r\n                                    //Match, update name to the new value.\r\n                                    foundMap = mapValue;\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (!foundMap && starMap && starMap[nameSegment]) {\r\n                        foundMap = starMap[nameSegment];\r\n                    }\r\n\r\n                    if (foundMap) {\r\n                        nameParts.splice(0, i, foundMap);\r\n                        name = nameParts.join('/');\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return name;\r\n        }\r\n\r\n        function removeScript(name) {\r\n            if (isBrowser) {\r\n                each(scripts(), function (scriptNode) {\r\n                    if (scriptNode.getAttribute('data-requiremodule') === name &&\r\n                        scriptNode.getAttribute('data-requirecontext') === context.contextName) {\r\n                        scriptNode.parentNode.removeChild(scriptNode);\r\n                        return true;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        function hasPathFallback(id) {\r\n            var pathConfig = config.paths[id];\r\n            if (pathConfig && isArray(pathConfig) && pathConfig.length > 1) {\r\n                removeScript(id);\r\n                //Pop off the first array value, since it failed, and\r\n                //retry\r\n                pathConfig.shift();\r\n                context.undef(id);\r\n                context.require([id]);\r\n                return true;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Creates a module mapping that includes plugin prefix, module\r\n         * name, and path. If parentModuleMap is provided it will\r\n         * also normalize the name via require.normalize()\r\n         *\r\n         * @param {String} name the module name\r\n         * @param {String} [parentModuleMap] parent module map\r\n         * for the module name, used to resolve relative names.\r\n         * @param {Boolean} isNormalized: is the ID already normalized.\r\n         * This is true if this call is done for a define() module ID.\r\n         * @param {Boolean} applyMap: apply the map config to the ID.\r\n         * Should only be true if this map is for a dependency.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        function makeModuleMap(name, parentModuleMap, isNormalized, applyMap) {\r\n            var index = name ? name.indexOf('!') : -1,\r\n                prefix = null,\r\n                parentName = parentModuleMap ? parentModuleMap.name : null,\r\n                originalName = name,\r\n                isDefine = true,\r\n                normalizedName = '',\r\n                url, pluginModule, suffix;\r\n\r\n            //If no name, then it means it is a require call, generate an\r\n            //internal name.\r\n            if (!name) {\r\n                isDefine = false;\r\n                name = '_@r' + (requireCounter += 1);\r\n            }\r\n\r\n            if (index !== -1) {\r\n                prefix = name.substring(0, index);\r\n                name = name.substring(index + 1, name.length);\r\n            }\r\n\r\n            if (prefix) {\r\n                prefix = normalize(prefix, parentName, applyMap);\r\n                pluginModule = defined[prefix];\r\n            }\r\n\r\n            //Account for relative paths if there is a base name.\r\n            if (name) {\r\n                if (prefix) {\r\n                    if (pluginModule && pluginModule.normalize) {\r\n                        //Plugin is loaded, use its normalize method.\r\n                        normalizedName = pluginModule.normalize(name, function (name) {\r\n                            return normalize(name, parentName, applyMap);\r\n                        });\r\n                    } else {\r\n                        normalizedName = normalize(name, parentName, applyMap);\r\n                    }\r\n                } else {\r\n                    //A regular module.\r\n                    normalizedName = normalize(name, parentName, applyMap);\r\n                    url = context.nameToUrl(normalizedName);\r\n                }\r\n            }\r\n\r\n            //If the id is a plugin id that cannot be determined if it needs\r\n            //normalization, stamp it with a unique ID so two matching relative\r\n            //ids that may conflict can be separate.\r\n            suffix = prefix && !pluginModule && !isNormalized ?\r\n                     '_unnormalized' + (unnormalizedCounter += 1) :\r\n                     '';\r\n\r\n            return {\r\n                prefix: prefix,\r\n                name: normalizedName,\r\n                parentMap: parentModuleMap,\r\n                unnormalized: !!suffix,\r\n                url: url,\r\n                originalName: originalName,\r\n                isDefine: isDefine,\r\n                id: (prefix ?\r\n                    prefix + '!' + normalizedName :\r\n                    normalizedName) + suffix\r\n            };\r\n        }\r\n\r\n        function getModule(depMap) {\r\n            var id = depMap.id,\r\n                mod = registry[id];\r\n\r\n            if (!mod) {\r\n                mod = registry[id] = new context.Module(depMap);\r\n            }\r\n\r\n            return mod;\r\n        }\r\n\r\n        function on(depMap, name, fn) {\r\n            var id = depMap.id,\r\n                mod = registry[id];\r\n\r\n            if (hasProp(defined, id) &&\r\n                (!mod || mod.defineEmitComplete)) {\r\n                if (name === 'defined') {\r\n                    fn(defined[id]);\r\n                }\r\n            } else {\r\n                getModule(depMap).on(name, fn);\r\n            }\r\n        }\r\n\r\n        function onError(err, errback) {\r\n            var ids = err.requireModules,\r\n                notified = false;\r\n\r\n            if (errback) {\r\n                errback(err);\r\n            } else {\r\n                each(ids, function (id) {\r\n                    var mod = registry[id];\r\n                    if (mod) {\r\n                        //Set error on module, so it skips timeout checks.\r\n                        mod.error = err;\r\n                        if (mod.events.error) {\r\n                            notified = true;\r\n                            mod.emit('error', err);\r\n                        }\r\n                    }\r\n                });\r\n\r\n                if (!notified) {\r\n                    req.onError(err);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Internal method to transfer globalQueue items to this context's\r\n         * defQueue.\r\n         */\r\n        function takeGlobalQueue() {\r\n            //Push all the globalDefQueue items into the context's defQueue\r\n            if (globalDefQueue.length) {\r\n                //Array splice in the values since the context code has a\r\n                //local var ref to defQueue, so cannot just reassign the one\r\n                //on context.\r\n                apsp.apply(defQueue,\r\n                           [defQueue.length - 1, 0].concat(globalDefQueue));\r\n                globalDefQueue = [];\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Helper function that creates a require function object to give to\r\n         * modules that ask for it as a dependency. It needs to be specific\r\n         * per module because of the implication of path mappings that may\r\n         * need to be relative to the module name.\r\n         */\r\n        function makeRequire(mod, enableBuildCallback, altRequire) {\r\n            var relMap = mod && mod.map,\r\n                modRequire = makeContextModuleFunc(altRequire || context.require,\r\n                                                   relMap,\r\n                                                   enableBuildCallback);\r\n\r\n            addRequireMethods(modRequire, context, relMap);\r\n            modRequire.isBrowser = isBrowser;\r\n\r\n            return modRequire;\r\n        }\r\n\r\n        handlers = {\r\n            'require': function (mod) {\r\n                return makeRequire(mod);\r\n            },\r\n            'exports': function (mod) {\r\n                mod.usingExports = true;\r\n                if (mod.map.isDefine) {\r\n                    return (mod.exports = defined[mod.map.id] = {});\r\n                }\r\n            },\r\n            'module': function (mod) {\r\n                return (mod.module = {\r\n                    id: mod.map.id,\r\n                    uri: mod.map.url,\r\n                    config: function () {\r\n                        return (config.config && config.config[mod.map.id]) || {};\r\n                    },\r\n                    exports: defined[mod.map.id]\r\n                });\r\n            }\r\n        };\r\n\r\n        function removeWaiting(id) {\r\n            //Clean up machinery used for waiting modules.\r\n            delete registry[id];\r\n\r\n            each(waitAry, function (mod, i) {\r\n                if (mod.map.id === id) {\r\n                    waitAry.splice(i, 1);\r\n                    if (!mod.defined) {\r\n                        context.waitCount -= 1;\r\n                    }\r\n                    return true;\r\n                }\r\n            });\r\n        }\r\n\r\n        function findCycle(mod, traced) {\r\n            var id = mod.map.id,\r\n                depArray = mod.depMaps,\r\n                foundModule;\r\n\r\n            //Do not bother with unitialized modules or not yet enabled\r\n            //modules.\r\n            if (!mod.inited) {\r\n                return;\r\n            }\r\n\r\n            //Found the cycle.\r\n            if (traced[id]) {\r\n                return mod;\r\n            }\r\n\r\n            traced[id] = true;\r\n\r\n            //Trace through the dependencies.\r\n            each(depArray, function (depMap) {\r\n                var depId = depMap.id,\r\n                    depMod = registry[depId];\r\n\r\n                if (!depMod) {\r\n                    return;\r\n                }\r\n\r\n                if (!depMod.inited || !depMod.enabled) {\r\n                    //Dependency is not inited, so this cannot\r\n                    //be used to determine a cycle.\r\n                    foundModule = null;\r\n                    delete traced[id];\r\n                    return true;\r\n                }\r\n\r\n                //mixin traced to a new object for each dependency, so that\r\n                //sibling dependencies in this object to not generate a\r\n                //false positive match on a cycle. Ideally an Object.create\r\n                //type of prototype delegation would be used here, but\r\n                //optimizing for file size vs. execution speed since hopefully\r\n                //the trees are small for circular dependency scans relative\r\n                //to the full app perf.\r\n                return (foundModule = findCycle(depMod, mixin({}, traced)));\r\n            });\r\n\r\n            return foundModule;\r\n        }\r\n\r\n        function forceExec(mod, traced, uninited) {\r\n            var id = mod.map.id,\r\n                depArray = mod.depMaps;\r\n\r\n            if (!mod.inited || !mod.map.isDefine) {\r\n                return;\r\n            }\r\n\r\n            if (traced[id]) {\r\n                return defined[id];\r\n            }\r\n\r\n            traced[id] = mod;\r\n\r\n            each(depArray, function(depMap) {\r\n                var depId = depMap.id,\r\n                    depMod = registry[depId],\r\n                    value;\r\n\r\n                if (handlers[depId]) {\r\n                    return;\r\n                }\r\n\r\n                if (depMod) {\r\n                    if (!depMod.inited || !depMod.enabled) {\r\n                        //Dependency is not inited,\r\n                        //so this module cannot be\r\n                        //given a forced value yet.\r\n                        uninited[id] = true;\r\n                        return;\r\n                    }\r\n\r\n                    //Get the value for the current dependency\r\n                    value = forceExec(depMod, traced, uninited);\r\n\r\n                    //Even with forcing it may not be done,\r\n                    //in particular if the module is waiting\r\n                    //on a plugin resource.\r\n                    if (!uninited[depId]) {\r\n                        mod.defineDepById(depId, value);\r\n                    }\r\n                }\r\n            });\r\n\r\n            mod.check(true);\r\n\r\n            return defined[id];\r\n        }\r\n\r\n        function modCheck(mod) {\r\n            mod.check();\r\n        }\r\n\r\n        function checkLoaded() {\r\n            var waitInterval = config.waitSeconds * 1000,\r\n                //It is possible to disable the wait interval by using waitSeconds of 0.\r\n                expired = waitInterval && (context.startTime + waitInterval) < new Date().getTime(),\r\n                noLoads = [],\r\n                stillLoading = false,\r\n                needCycleCheck = true,\r\n                map, modId, err, usingPathFallback;\r\n\r\n            //Do not bother if this call was a result of a cycle break.\r\n            if (inCheckLoaded) {\r\n                return;\r\n            }\r\n\r\n            inCheckLoaded = true;\r\n\r\n            //Figure out the state of all the modules.\r\n            eachProp(registry, function (mod) {\r\n                map = mod.map;\r\n                modId = map.id;\r\n\r\n                //Skip things that are not enabled or in error state.\r\n                if (!mod.enabled) {\r\n                    return;\r\n                }\r\n\r\n                if (!mod.error) {\r\n                    //If the module should be executed, and it has not\r\n                    //been inited and time is up, remember it.\r\n                    if (!mod.inited && expired) {\r\n                        if (hasPathFallback(modId)) {\r\n                            usingPathFallback = true;\r\n                            stillLoading = true;\r\n                        } else {\r\n                            noLoads.push(modId);\r\n                            removeScript(modId);\r\n                        }\r\n                    } else if (!mod.inited && mod.fetched && map.isDefine) {\r\n                        stillLoading = true;\r\n                        if (!map.prefix) {\r\n                            //No reason to keep looking for unfinished\r\n                            //loading. If the only stillLoading is a\r\n                            //plugin resource though, keep going,\r\n                            //because it may be that a plugin resource\r\n                            //is waiting on a non-plugin cycle.\r\n                            return (needCycleCheck = false);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n\r\n            if (expired && noLoads.length) {\r\n                //If wait time expired, throw error of unloaded modules.\r\n                err = makeError('timeout', 'Load timeout for modules: ' + noLoads, null, noLoads);\r\n                err.contextName = context.contextName;\r\n                return onError(err);\r\n            }\r\n\r\n            //Not expired, check for a cycle.\r\n            if (needCycleCheck) {\r\n\r\n                each(waitAry, function (mod) {\r\n                    if (mod.defined) {\r\n                        return;\r\n                    }\r\n\r\n                    var cycleMod = findCycle(mod, {}),\r\n                        traced = {};\r\n\r\n                    if (cycleMod) {\r\n                        forceExec(cycleMod, traced, {});\r\n\r\n                        //traced modules may have been\r\n                        //removed from the registry, but\r\n                        //their listeners still need to\r\n                        //be called.\r\n                        eachProp(traced, modCheck);\r\n                    }\r\n                });\r\n\r\n                //Now that dependencies have\r\n                //been satisfied, trigger the\r\n                //completion check that then\r\n                //notifies listeners.\r\n                eachProp(registry, modCheck);\r\n            }\r\n\r\n            //If still waiting on loads, and the waiting load is something\r\n            //other than a plugin resource, or there are still outstanding\r\n            //scripts, then just try back later.\r\n            if ((!expired || usingPathFallback) && stillLoading) {\r\n                //Something is still waiting to load. Wait for it, but only\r\n                //if a timeout is not already in effect.\r\n                if ((isBrowser || isWebWorker) && !checkLoadedTimeoutId) {\r\n                    checkLoadedTimeoutId = setTimeout(function () {\r\n                        checkLoadedTimeoutId = 0;\r\n                        checkLoaded();\r\n                    }, 50);\r\n                }\r\n            }\r\n\r\n            inCheckLoaded = false;\r\n        }\r\n\r\n        Module = function (map) {\r\n            this.events = undefEvents[map.id] || {};\r\n            this.map = map;\r\n            this.shim = config.shim[map.id];\r\n            this.depExports = [];\r\n            this.depMaps = [];\r\n            this.depMatched = [];\r\n            this.pluginMaps = {};\r\n            this.depCount = 0;\r\n\r\n            /* this.exports this.factory\r\n               this.depMaps = [],\r\n               this.enabled, this.fetched\r\n            */\r\n        };\r\n\r\n        Module.prototype = {\r\n            init: function(depMaps, factory, errback, options) {\r\n                options = options || {};\r\n\r\n                //Do not do more inits if already done. Can happen if there\r\n                //are multiple define calls for the same module. That is not\r\n                //a normal, common case, but it is also not unexpected.\r\n                if (this.inited) {\r\n                    return;\r\n                }\r\n\r\n                this.factory = factory;\r\n\r\n                if (errback) {\r\n                    //Register for errors on this module.\r\n                    this.on('error', errback);\r\n                } else if (this.events.error) {\r\n                    //If no errback already, but there are error listeners\r\n                    //on this module, set up an errback to pass to the deps.\r\n                    errback = bind(this, function (err) {\r\n                        this.emit('error', err);\r\n                    });\r\n                }\r\n\r\n                //Do a copy of the dependency array, so that\r\n                //source inputs are not modified. For example\r\n                //\"shim\" deps are passed in here directly, and\r\n                //doing a direct modification of the depMaps array\r\n                //would affect that config.\r\n                this.depMaps = depMaps && depMaps.slice(0);\r\n                this.depMaps.rjsSkipMap = depMaps.rjsSkipMap;\r\n\r\n                this.errback = errback;\r\n\r\n                //Indicate this module has be initialized\r\n                this.inited = true;\r\n\r\n                this.ignore = options.ignore;\r\n\r\n                //Could have option to init this module in enabled mode,\r\n                //or could have been previously marked as enabled. However,\r\n                //the dependencies are not known until init is called. So\r\n                //if enabled previously, now trigger dependencies as enabled.\r\n                if (options.enabled || this.enabled) {\r\n                    //Enable this module and dependencies.\r\n                    //Will call this.check()\r\n                    this.enable();\r\n                } else {\r\n                    this.check();\r\n                }\r\n            },\r\n\r\n            defineDepById: function (id, depExports) {\r\n                var i;\r\n\r\n                //Find the index for this dependency.\r\n                each(this.depMaps, function (map, index) {\r\n                    if (map.id === id) {\r\n                        i = index;\r\n                        return true;\r\n                    }\r\n                });\r\n\r\n                return this.defineDep(i, depExports);\r\n            },\r\n\r\n            defineDep: function (i, depExports) {\r\n                //Because of cycles, defined callback for a given\r\n                //export can be called more than once.\r\n                if (!this.depMatched[i]) {\r\n                    this.depMatched[i] = true;\r\n                    this.depCount -= 1;\r\n                    this.depExports[i] = depExports;\r\n                }\r\n            },\r\n\r\n            fetch: function () {\r\n                if (this.fetched) {\r\n                    return;\r\n                }\r\n                this.fetched = true;\r\n\r\n                context.startTime = (new Date()).getTime();\r\n\r\n                var map = this.map;\r\n\r\n                //If the manager is for a plugin managed resource,\r\n                //ask the plugin to load it now.\r\n                if (this.shim) {\r\n                    makeRequire(this, true)(this.shim.deps || [], bind(this, function () {\r\n                        return map.prefix ? this.callPlugin() : this.load();\r\n                    }));\r\n                } else {\r\n                    //Regular dependency.\r\n                    return map.prefix ? this.callPlugin() : this.load();\r\n                }\r\n            },\r\n\r\n            load: function() {\r\n                var url = this.map.url;\r\n\r\n                //Regular dependency.\r\n                if (!urlFetched[url]) {\r\n                    urlFetched[url] = true;\r\n                    context.load(this.map.id, url);\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Checks is the module is ready to define itself, and if so,\r\n             * define it. If the silent argument is true, then it will just\r\n             * define, but not notify listeners, and not ask for a context-wide\r\n             * check of all loaded modules. That is useful for cycle breaking.\r\n             */\r\n            check: function (silent) {\r\n                if (!this.enabled || this.enabling) {\r\n                    return;\r\n                }\r\n\r\n                var id = this.map.id,\r\n                    depExports = this.depExports,\r\n                    exports = this.exports,\r\n                    factory = this.factory,\r\n                    err, cjsModule;\r\n\r\n                if (!this.inited) {\r\n                    this.fetch();\r\n                } else if (this.error) {\r\n                    this.emit('error', this.error);\r\n                } else if (!this.defining) {\r\n                    //The factory could trigger another require call\r\n                    //that would result in checking this module to\r\n                    //define itself again. If already in the process\r\n                    //of doing that, skip this work.\r\n                    this.defining = true;\r\n\r\n                    if (this.depCount < 1 && !this.defined) {\r\n                        if (isFunction(factory)) {\r\n                            //If there is an error listener, favor passing\r\n                            //to that instead of throwing an error.\r\n                            if (this.events.error) {\r\n                                try {\r\n                                    exports = context.execCb(id, factory, depExports, exports);\r\n                                } catch (e) {\r\n                                    err = e;\r\n                                }\r\n                            } else {\r\n                                exports = context.execCb(id, factory, depExports, exports);\r\n                            }\r\n\r\n                            if (this.map.isDefine) {\r\n                                //If setting exports via 'module' is in play,\r\n                                //favor that over return value and exports. After that,\r\n                                //favor a non-undefined return value over exports use.\r\n                                cjsModule = this.module;\r\n                                if (cjsModule &&\r\n                                    cjsModule.exports !== undefined &&\r\n                                    //Make sure it is not already the exports value\r\n                                    cjsModule.exports !== this.exports) {\r\n                                    exports = cjsModule.exports;\r\n                                } else if (exports === undefined && this.usingExports) {\r\n                                    //exports already set the defined value.\r\n                                    exports = this.exports;\r\n                                }\r\n                            }\r\n\r\n                            if (err) {\r\n                                err.requireMap = this.map;\r\n                                err.requireModules = [this.map.id];\r\n                                err.requireType = 'define';\r\n                                return onError((this.error = err));\r\n                            }\r\n\r\n                        } else {\r\n                            //Just a literal value\r\n                            exports = factory;\r\n                        }\r\n\r\n                        this.exports = exports;\r\n\r\n                        if (this.map.isDefine && !this.ignore) {\r\n                            defined[id] = exports;\r\n\r\n                            if (req.onResourceLoad) {\r\n                                req.onResourceLoad(context, this.map, this.depMaps);\r\n                            }\r\n                        }\r\n\r\n                        //Clean up\r\n                        delete registry[id];\r\n\r\n                        this.defined = true;\r\n                        context.waitCount -= 1;\r\n                        if (context.waitCount === 0) {\r\n                            //Clear the wait array used for cycles.\r\n                            waitAry = [];\r\n                        }\r\n                    }\r\n\r\n                    //Finished the define stage. Allow calling check again\r\n                    //to allow define notifications below in the case of a\r\n                    //cycle.\r\n                    this.defining = false;\r\n\r\n                    if (!silent) {\r\n                        if (this.defined && !this.defineEmitted) {\r\n                            this.defineEmitted = true;\r\n                            this.emit('defined', this.exports);\r\n                            this.defineEmitComplete = true;\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n\r\n            callPlugin: function() {\r\n                var map = this.map,\r\n                    id = map.id,\r\n                    pluginMap = makeModuleMap(map.prefix, null, false, true);\r\n\r\n                on(pluginMap, 'defined', bind(this, function (plugin) {\r\n                    var name = this.map.name,\r\n                        parentName = this.map.parentMap ? this.map.parentMap.name : null,\r\n                        load, normalizedMap, normalizedMod;\r\n\r\n                    //If current map is not normalized, wait for that\r\n                    //normalized name to load instead of continuing.\r\n                    if (this.map.unnormalized) {\r\n                        //Normalize the ID if the plugin allows it.\r\n                        if (plugin.normalize) {\r\n                            name = plugin.normalize(name, function (name) {\r\n                                return normalize(name, parentName, true);\r\n                            }) || '';\r\n                        }\r\n\r\n                        normalizedMap = makeModuleMap(map.prefix + '!' + name,\r\n                                                      this.map.parentMap,\r\n                                                      false,\r\n                                                      true);\r\n                        on(normalizedMap,\r\n                           'defined', bind(this, function (value) {\r\n                            this.init([], function () { return value; }, null, {\r\n                                enabled: true,\r\n                                ignore: true\r\n                            });\r\n                        }));\r\n                        normalizedMod = registry[normalizedMap.id];\r\n                        if (normalizedMod) {\r\n                            if (this.events.error) {\r\n                                normalizedMod.on('error', bind(this, function (err) {\r\n                                    this.emit('error', err);\r\n                                }));\r\n                            }\r\n                            normalizedMod.enable();\r\n                        }\r\n\r\n                        return;\r\n                    }\r\n\r\n                    load = bind(this, function (value) {\r\n                        this.init([], function () { return value; }, null, {\r\n                            enabled: true\r\n                        });\r\n                    });\r\n\r\n                    load.error = bind(this, function (err) {\r\n                        this.inited = true;\r\n                        this.error = err;\r\n                        err.requireModules = [id];\r\n\r\n                        //Remove temp unnormalized modules for this module,\r\n                        //since they will never be resolved otherwise now.\r\n                        eachProp(registry, function (mod) {\r\n                            if (mod.map.id.indexOf(id + '_unnormalized') === 0) {\r\n                                removeWaiting(mod.map.id);\r\n                            }\r\n                        });\r\n\r\n                        onError(err);\r\n                    });\r\n\r\n                    //Allow plugins to load other code without having to know the\r\n                    //context or how to 'complete' the load.\r\n                    load.fromText = function (moduleName, text) {\r\n                        /*jslint evil: true */\r\n                        var hasInteractive = useInteractive;\r\n\r\n                        //Turn off interactive script matching for IE for any define\r\n                        //calls in the text, then turn it back on at the end.\r\n                        if (hasInteractive) {\r\n                            useInteractive = false;\r\n                        }\r\n\r\n                        //Prime the system by creating a module instance for\r\n                        //it.\r\n                        getModule(makeModuleMap(moduleName));\r\n\r\n                        req.exec(text);\r\n\r\n                        if (hasInteractive) {\r\n                            useInteractive = true;\r\n                        }\r\n\r\n                        //Support anonymous modules.\r\n                        context.completeLoad(moduleName);\r\n                    };\r\n\r\n                    //Use parentName here since the plugin's name is not reliable,\r\n                    //could be some weird string with no path that actually wants to\r\n                    //reference the parentName's path.\r\n                    plugin.load(map.name, makeRequire(map.parentMap, true, function (deps, cb) {\r\n                        deps.rjsSkipMap = true;\r\n                        return context.require(deps, cb);\r\n                    }), load, config);\r\n                }));\r\n\r\n                context.enable(pluginMap, this);\r\n                this.pluginMaps[pluginMap.id] = pluginMap;\r\n            },\r\n\r\n            enable: function () {\r\n                this.enabled = true;\r\n\r\n                if (!this.waitPushed) {\r\n                    waitAry.push(this);\r\n                    context.waitCount += 1;\r\n                    this.waitPushed = true;\r\n                }\r\n\r\n                //Set flag mentioning that the module is enabling,\r\n                //so that immediate calls to the defined callbacks\r\n                //for dependencies do not trigger inadvertent load\r\n                //with the depCount still being zero.\r\n                this.enabling = true;\r\n\r\n                //Enable each dependency\r\n                each(this.depMaps, bind(this, function (depMap, i) {\r\n                    var id, mod, handler;\r\n\r\n                    if (typeof depMap === 'string') {\r\n                        //Dependency needs to be converted to a depMap\r\n                        //and wired up to this module.\r\n                        depMap = makeModuleMap(depMap,\r\n                                               (this.map.isDefine ? this.map : this.map.parentMap),\r\n                                               false,\r\n                                               !this.depMaps.rjsSkipMap);\r\n                        this.depMaps[i] = depMap;\r\n\r\n                        handler = handlers[depMap.id];\r\n\r\n                        if (handler) {\r\n                            this.depExports[i] = handler(this);\r\n                            return;\r\n                        }\r\n\r\n                        this.depCount += 1;\r\n\r\n                        on(depMap, 'defined', bind(this, function (depExports) {\r\n                            this.defineDep(i, depExports);\r\n                            this.check();\r\n                        }));\r\n\r\n                        if (this.errback) {\r\n                            on(depMap, 'error', this.errback);\r\n                        }\r\n                    }\r\n\r\n                    id = depMap.id;\r\n                    mod = registry[id];\r\n\r\n                    //Skip special modules like 'require', 'exports', 'module'\r\n                    //Also, don't call enable if it is already enabled,\r\n                    //important in circular dependency cases.\r\n                    if (!handlers[id] && mod && !mod.enabled) {\r\n                        context.enable(depMap, this);\r\n                    }\r\n                }));\r\n\r\n                //Enable each plugin that is used in\r\n                //a dependency\r\n                eachProp(this.pluginMaps, bind(this, function (pluginMap) {\r\n                    var mod = registry[pluginMap.id];\r\n                    if (mod && !mod.enabled) {\r\n                        context.enable(pluginMap, this);\r\n                    }\r\n                }));\r\n\r\n                this.enabling = false;\r\n\r\n                this.check();\r\n            },\r\n\r\n            on: function(name, cb) {\r\n                var cbs = this.events[name];\r\n                if (!cbs) {\r\n                    cbs = this.events[name] = [];\r\n                }\r\n                cbs.push(cb);\r\n            },\r\n\r\n            emit: function (name, evt) {\r\n                each(this.events[name], function (cb) {\r\n                    cb(evt);\r\n                });\r\n                if (name === 'error') {\r\n                    //Now that the error handler was triggered, remove\r\n                    //the listeners, since this broken Module instance\r\n                    //can stay around for a while in the registry/waitAry.\r\n                    delete this.events[name];\r\n                }\r\n            }\r\n        };\r\n\r\n        function callGetModule(args) {\r\n            getModule(makeModuleMap(args[0], null, true)).init(args[1], args[2]);\r\n        }\r\n\r\n        function removeListener(node, func, name, ieName) {\r\n            //Favor detachEvent because of IE9\r\n            //issue, see attachEvent/addEventListener comment elsewhere\r\n            //in this file.\r\n            if (node.detachEvent && !isOpera) {\r\n                //Probably IE. If not it will throw an error, which will be\r\n                //useful to know.\r\n                if (ieName) {\r\n                    node.detachEvent(ieName, func);\r\n                }\r\n            } else {\r\n                node.removeEventListener(name, func, false);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Given an event from a script node, get the requirejs info from it,\r\n         * and then removes the event listeners on the node.\r\n         * @param {Event} evt\r\n         * @returns {Object}\r\n         */\r\n        function getScriptData(evt) {\r\n            //Using currentTarget instead of target for Firefox 2.0's sake. Not\r\n            //all old browsers will be supported, but this one was easy enough\r\n            //to support and still makes sense.\r\n            var node = evt.currentTarget || evt.srcElement;\r\n\r\n            //Remove the listeners once here.\r\n            removeListener(node, context.onScriptLoad, 'load', 'onreadystatechange');\r\n            removeListener(node, context.onScriptError, 'error');\r\n\r\n            return {\r\n                node: node,\r\n                id: node && node.getAttribute('data-requiremodule')\r\n            };\r\n        }\r\n\r\n        return (context = {\r\n            config: config,\r\n            contextName: contextName,\r\n            registry: registry,\r\n            defined: defined,\r\n            urlFetched: urlFetched,\r\n            waitCount: 0,\r\n            defQueue: defQueue,\r\n            Module: Module,\r\n            makeModuleMap: makeModuleMap,\r\n\r\n            /**\r\n             * Set a configuration for the context.\r\n             * @param {Object} cfg config object to integrate.\r\n             */\r\n            configure: function (cfg) {\r\n                //Make sure the baseUrl ends in a slash.\r\n                if (cfg.baseUrl) {\r\n                    if (cfg.baseUrl.charAt(cfg.baseUrl.length - 1) !== '/') {\r\n                        cfg.baseUrl += '/';\r\n                    }\r\n                }\r\n\r\n                //Save off the paths and packages since they require special processing,\r\n                //they are additive.\r\n                var pkgs = config.pkgs,\r\n                    shim = config.shim,\r\n                    paths = config.paths,\r\n                    map = config.map;\r\n\r\n                //Mix in the config values, favoring the new values over\r\n                //existing ones in context.config.\r\n                mixin(config, cfg, true);\r\n\r\n                //Merge paths.\r\n                config.paths = mixin(paths, cfg.paths, true);\r\n\r\n                //Merge map\r\n                if (cfg.map) {\r\n                    config.map = mixin(map || {}, cfg.map, true, true);\r\n                }\r\n\r\n                //Merge shim\r\n                if (cfg.shim) {\r\n                    eachProp(cfg.shim, function (value, id) {\r\n                        //Normalize the structure\r\n                        if (isArray(value)) {\r\n                            value = {\r\n                                deps: value\r\n                            };\r\n                        }\r\n                        if (value.exports && !value.exports.__buildReady) {\r\n                            value.exports = context.makeShimExports(value.exports);\r\n                        }\r\n                        shim[id] = value;\r\n                    });\r\n                    config.shim = shim;\r\n                }\r\n\r\n                //Adjust packages if necessary.\r\n                if (cfg.packages) {\r\n                    each(cfg.packages, function (pkgObj) {\r\n                        var location;\r\n\r\n                        pkgObj = typeof pkgObj === 'string' ? { name: pkgObj } : pkgObj;\r\n                        location = pkgObj.location;\r\n\r\n                        //Create a brand new object on pkgs, since currentPackages can\r\n                        //be passed in again, and config.pkgs is the internal transformed\r\n                        //state for all package configs.\r\n                        pkgs[pkgObj.name] = {\r\n                            name: pkgObj.name,\r\n                            location: location || pkgObj.name,\r\n                            //Remove leading dot in main, so main paths are normalized,\r\n                            //and remove any trailing .js, since different package\r\n                            //envs have different conventions: some use a module name,\r\n                            //some use a file name.\r\n                            main: (pkgObj.main || 'main')\r\n                                  .replace(currDirRegExp, '')\r\n                                  .replace(jsSuffixRegExp, '')\r\n                        };\r\n                    });\r\n\r\n                    //Done with modifications, assing packages back to context config\r\n                    config.pkgs = pkgs;\r\n                }\r\n\r\n                //If there are any \"waiting to execute\" modules in the registry,\r\n                //update the maps for them, since their info, like URLs to load,\r\n                //may have changed.\r\n                eachProp(registry, function (mod, id) {\r\n                    mod.map = makeModuleMap(id);\r\n                });\r\n\r\n                //If a deps array or a config callback is specified, then call\r\n                //require with those args. This is useful when require is defined as a\r\n                //config object before require.js is loaded.\r\n                if (cfg.deps || cfg.callback) {\r\n                    context.require(cfg.deps || [], cfg.callback);\r\n                }\r\n            },\r\n\r\n            makeShimExports: function (exports) {\r\n                var func;\r\n                if (typeof exports === 'string') {\r\n                    func = function () {\r\n                        return getGlobal(exports);\r\n                    };\r\n                    //Save the exports for use in nodefine checking.\r\n                    func.exports = exports;\r\n                    return func;\r\n                } else {\r\n                    return function () {\r\n                        return exports.apply(global, arguments);\r\n                    };\r\n                }\r\n            },\r\n\r\n            requireDefined: function (id, relMap) {\r\n                return hasProp(defined, makeModuleMap(id, relMap, false, true).id);\r\n            },\r\n\r\n            requireSpecified: function (id, relMap) {\r\n                id = makeModuleMap(id, relMap, false, true).id;\r\n                return hasProp(defined, id) || hasProp(registry, id);\r\n            },\r\n\r\n            require: function (deps, callback, errback, relMap) {\r\n                var moduleName, id, map, requireMod, args;\r\n                if (typeof deps === 'string') {\r\n                    if (isFunction(callback)) {\r\n                        //Invalid call\r\n                        return onError(makeError('requireargs', 'Invalid require call'), errback);\r\n                    }\r\n\r\n                    //Synchronous access to one module. If require.get is\r\n                    //available (as in the Node adapter), prefer that.\r\n                    //In this case deps is the moduleName and callback is\r\n                    //the relMap\r\n                    if (req.get) {\r\n                        return req.get(context, deps, callback);\r\n                    }\r\n\r\n                    //Just return the module wanted. In this scenario, the\r\n                    //second arg (if passed) is just the relMap.\r\n                    moduleName = deps;\r\n                    relMap = callback;\r\n\r\n                    //Normalize module name, if it contains . or ..\r\n                    map = makeModuleMap(moduleName, relMap, false, true);\r\n                    id = map.id;\r\n\r\n                    if (!hasProp(defined, id)) {\r\n                        return onError(makeError('notloaded', 'Module name \"' +\r\n                                    id +\r\n                                    '\" has not been loaded yet for context: ' +\r\n                                    contextName));\r\n                    }\r\n                    return defined[id];\r\n                }\r\n\r\n                //Callback require. Normalize args. if callback or errback is\r\n                //not a function, it means it is a relMap. Test errback first.\r\n                if (errback && !isFunction(errback)) {\r\n                    relMap = errback;\r\n                    errback = undefined;\r\n                }\r\n                if (callback && !isFunction(callback)) {\r\n                    relMap = callback;\r\n                    callback = undefined;\r\n                }\r\n\r\n                //Any defined modules in the global queue, intake them now.\r\n                takeGlobalQueue();\r\n\r\n                //Make sure any remaining defQueue items get properly processed.\r\n                while (defQueue.length) {\r\n                    args = defQueue.shift();\r\n                    if (args[0] === null) {\r\n                        return onError(makeError('mismatch', 'Mismatched anonymous define() module: ' + args[args.length - 1]));\r\n                    } else {\r\n                        //args are id, deps, factory. Should be normalized by the\r\n                        //define() function.\r\n                        callGetModule(args);\r\n                    }\r\n                }\r\n\r\n                //Mark all the dependencies as needing to be loaded.\r\n                requireMod = getModule(makeModuleMap(null, relMap));\r\n\r\n                requireMod.init(deps, callback, errback, {\r\n                    enabled: true\r\n                });\r\n\r\n                checkLoaded();\r\n\r\n                return context.require;\r\n            },\r\n\r\n            undef: function (id) {\r\n                var map = makeModuleMap(id, null, true),\r\n                    mod = registry[id];\r\n\r\n                delete defined[id];\r\n                delete urlFetched[map.url];\r\n                delete undefEvents[id];\r\n\r\n                if (mod) {\r\n                    //Hold on to listeners in case the\r\n                    //module will be attempted to be reloaded\r\n                    //using a different config.\r\n                    if (mod.events.defined) {\r\n                        undefEvents[id] = mod.events;\r\n                    }\r\n\r\n                    removeWaiting(id);\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Called to enable a module if it is still in the registry\r\n             * awaiting enablement. parent module is passed in for context,\r\n             * used by the optimizer.\r\n             */\r\n            enable: function (depMap, parent) {\r\n                var mod = registry[depMap.id];\r\n                if (mod) {\r\n                    getModule(depMap).enable();\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Internal method used by environment adapters to complete a load event.\r\n             * A load event could be a script load or just a load pass from a synchronous\r\n             * load call.\r\n             * @param {String} moduleName the name of the module to potentially complete.\r\n             */\r\n            completeLoad: function (moduleName) {\r\n                var shim = config.shim[moduleName] || {},\r\n                shExports = shim.exports && shim.exports.exports,\r\n                found, args, mod;\r\n\r\n                takeGlobalQueue();\r\n\r\n                while (defQueue.length) {\r\n                    args = defQueue.shift();\r\n                    if (args[0] === null) {\r\n                        args[0] = moduleName;\r\n                        //If already found an anonymous module and bound it\r\n                        //to this name, then this is some other anon module\r\n                        //waiting for its completeLoad to fire.\r\n                        if (found) {\r\n                            break;\r\n                        }\r\n                        found = true;\r\n                    } else if (args[0] === moduleName) {\r\n                        //Found matching define call for this script!\r\n                        found = true;\r\n                    }\r\n\r\n                    callGetModule(args);\r\n                }\r\n\r\n                //Do this after the cycle of callGetModule in case the result\r\n                //of those calls/init calls changes the registry.\r\n                mod = registry[moduleName];\r\n\r\n                if (!found &&\r\n                    !defined[moduleName] &&\r\n                    mod && !mod.inited) {\r\n                    if (config.enforceDefine && (!shExports || !getGlobal(shExports))) {\r\n                        if (hasPathFallback(moduleName)) {\r\n                            return;\r\n                        } else {\r\n                            return onError(makeError('nodefine',\r\n                                             'No define call for ' + moduleName,\r\n                                             null,\r\n                                             [moduleName]));\r\n                        }\r\n                    } else {\r\n                        //A script that does not call define(), so just simulate\r\n                        //the call for it.\r\n                        callGetModule([moduleName, (shim.deps || []), shim.exports]);\r\n                    }\r\n                }\r\n\r\n                checkLoaded();\r\n            },\r\n\r\n            /**\r\n             * Converts a module name + .extension into an URL path.\r\n             * *Requires* the use of a module name. It does not support using\r\n             * plain URLs like nameToUrl.\r\n             */\r\n            toUrl: function (moduleNamePlusExt, relModuleMap) {\r\n                var index = moduleNamePlusExt.lastIndexOf('.'),\r\n                    ext = null;\r\n\r\n                if (index !== -1) {\r\n                    ext = moduleNamePlusExt.substring(index, moduleNamePlusExt.length);\r\n                    moduleNamePlusExt = moduleNamePlusExt.substring(0, index);\r\n                }\r\n\r\n                return context.nameToUrl(normalize(moduleNamePlusExt, relModuleMap && relModuleMap.id, true),\r\n                                         ext);\r\n            },\r\n\r\n            /**\r\n             * Converts a module name to a file path. Supports cases where\r\n             * moduleName may actually be just an URL.\r\n             * Note that it **does not** call normalize on the moduleName,\r\n             * it is assumed to have already been normalized. This is an\r\n             * internal API, not a public one. Use toUrl for the public API.\r\n             */\r\n            nameToUrl: function (moduleName, ext) {\r\n                var paths, pkgs, pkg, pkgPath, syms, i, parentModule, url,\r\n                    parentPath;\r\n\r\n                //If a colon is in the URL, it indicates a protocol is used and it is just\r\n                //an URL to a file, or if it starts with a slash, contains a query arg (i.e. ?)\r\n                //or ends with .js, then assume the user meant to use an url and not a module id.\r\n                //The slash is important for protocol-less URLs as well as full paths.\r\n                if (req.jsExtRegExp.test(moduleName)) {\r\n                    //Just a plain path, not module name lookup, so just return it.\r\n                    //Add extension if it is included. This is a bit wonky, only non-.js things pass\r\n                    //an extension, this method probably needs to be reworked.\r\n                    url = moduleName + (ext || '');\r\n                } else {\r\n                    //A module that needs to be converted to a path.\r\n                    paths = config.paths;\r\n                    pkgs = config.pkgs;\r\n\r\n                    syms = moduleName.split('/');\r\n                    //For each module name segment, see if there is a path\r\n                    //registered for it. Start with most specific name\r\n                    //and work up from it.\r\n                    for (i = syms.length; i > 0; i -= 1) {\r\n                        parentModule = syms.slice(0, i).join('/');\r\n                        pkg = pkgs[parentModule];\r\n                        parentPath = paths[parentModule];\r\n                        if (parentPath) {\r\n                            //If an array, it means there are a few choices,\r\n                            //Choose the one that is desired\r\n                            if (isArray(parentPath)) {\r\n                                parentPath = parentPath[0];\r\n                            }\r\n                            syms.splice(0, i, parentPath);\r\n                            break;\r\n                        } else if (pkg) {\r\n                            //If module name is just the package name, then looking\r\n                            //for the main module.\r\n                            if (moduleName === pkg.name) {\r\n                                pkgPath = pkg.location + '/' + pkg.main;\r\n                            } else {\r\n                                pkgPath = pkg.location;\r\n                            }\r\n                            syms.splice(0, i, pkgPath);\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    //Join the path parts together, then figure out if baseUrl is needed.\r\n                    url = syms.join('/') + (ext || '.js');\r\n                    url = (url.charAt(0) === '/' || url.match(/^[\\w\\+\\.\\-]+:/) ? '' : config.baseUrl) + url;\r\n                }\r\n\r\n                return config.urlArgs ? url +\r\n                                        ((url.indexOf('?') === -1 ? '?' : '&') +\r\n                                         config.urlArgs) : url;\r\n            },\r\n\r\n            //Delegates to req.load. Broken out as a separate function to\r\n            //allow overriding in the optimizer.\r\n            load: function (id, url) {\r\n                req.load(context, id, url);\r\n            },\r\n\r\n            /**\r\n             * Executes a module callack function. Broken out as a separate function\r\n             * solely to allow the build system to sequence the files in the built\r\n             * layer in the right sequence.\r\n             *\r\n             * @private\r\n             */\r\n            execCb: function (name, callback, args, exports) {\r\n                return callback.apply(exports, args);\r\n            },\r\n\r\n            /**\r\n             * callback for script loads, used to check status of loading.\r\n             *\r\n             * @param {Event} evt the event from the browser for the script\r\n             * that was loaded.\r\n             */\r\n            onScriptLoad: function (evt) {\r\n                //Using currentTarget instead of target for Firefox 2.0's sake. Not\r\n                //all old browsers will be supported, but this one was easy enough\r\n                //to support and still makes sense.\r\n                if (evt.type === 'load' ||\r\n                    (readyRegExp.test((evt.currentTarget || evt.srcElement).readyState))) {\r\n                    //Reset interactive script so a script node is not held onto for\r\n                    //to long.\r\n                    interactiveScript = null;\r\n\r\n                    //Pull out the name of the module and the context.\r\n                    var data = getScriptData(evt);\r\n                    context.completeLoad(data.id);\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Callback for script errors.\r\n             */\r\n            onScriptError: function (evt) {\r\n                var data = getScriptData(evt);\r\n                if (!hasPathFallback(data.id)) {\r\n                    return onError(makeError('scripterror', 'Script error', evt, [data.id]));\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Main entry point.\r\n     *\r\n     * If the only argument to require is a string, then the module that\r\n     * is represented by that string is fetched for the appropriate context.\r\n     *\r\n     * If the first argument is an array, then it will be treated as an array\r\n     * of dependency string names to fetch. An optional function callback can\r\n     * be specified to execute when all of those dependencies are available.\r\n     *\r\n     * Make a local req variable to help Caja compliance (it assumes things\r\n     * on a require that are not standardized), and to give a short\r\n     * name for minification/local scope use.\r\n     */\r\n    req = requirejs = function (deps, callback, errback, optional) {\r\n\r\n        //Find the right context, use default\r\n        var contextName = defContextName,\r\n            context, config;\r\n\r\n        // Determine if have config object in the call.\r\n        if (!isArray(deps) && typeof deps !== 'string') {\r\n            // deps is a config object\r\n            config = deps;\r\n            if (isArray(callback)) {\r\n                // Adjust args if there are dependencies\r\n                deps = callback;\r\n                callback = errback;\r\n                errback = optional;\r\n            } else {\r\n                deps = [];\r\n            }\r\n        }\r\n\r\n        if (config && config.context) {\r\n            contextName = config.context;\r\n        }\r\n\r\n        context = contexts[contextName];\r\n        if (!context) {\r\n            context = contexts[contextName] = req.s.newContext(contextName);\r\n        }\r\n\r\n        if (config) {\r\n            context.configure(config);\r\n        }\r\n\r\n        return context.require(deps, callback, errback);\r\n    };\r\n\r\n    /**\r\n     * Support require.config() to make it easier to cooperate with other\r\n     * AMD loaders on globally agreed names.\r\n     */\r\n    req.config = function (config) {\r\n        return req(config);\r\n    };\r\n\r\n    /**\r\n     * Export require as a global, but only if it does not already exist.\r\n     */\r\n    if (!require) {\r\n        require = req;\r\n    }\r\n\r\n    req.version = version;\r\n\r\n    //Used to filter out dependencies that are already paths.\r\n    req.jsExtRegExp = /^\\/|:|\\?|\\.js$/;\r\n    req.isBrowser = isBrowser;\r\n    s = req.s = {\r\n        contexts: contexts,\r\n        newContext: newContext\r\n    };\r\n\r\n    //Create default context.\r\n    req({});\r\n\r\n    //Exports some context-sensitive methods on global require, using\r\n    //default context if no context specified.\r\n    addRequireMethods(req);\r\n\r\n    if (isBrowser) {\r\n        head = s.head = document.getElementsByTagName('head')[0];\r\n        //If BASE tag is in play, using appendChild is a problem for IE6.\r\n        //When that browser dies, this can be removed. Details in this jQuery bug:\r\n        //http://dev.jquery.com/ticket/2709\r\n        baseElement = document.getElementsByTagName('base')[0];\r\n        if (baseElement) {\r\n            head = s.head = baseElement.parentNode;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Any errors that require explicitly generates will be passed to this\r\n     * function. Intercept/override it if you want custom error handling.\r\n     * @param {Error} err the error object.\r\n     */\r\n    req.onError = function (err) {\r\n        throw err;\r\n    };\r\n\r\n    /**\r\n     * Does the request to load a module for the browser case.\r\n     * Make this a separate function to allow other environments\r\n     * to override it.\r\n     *\r\n     * @param {Object} context the require context to find state.\r\n     * @param {String} moduleName the name of the module.\r\n     * @param {Object} url the URL to the module.\r\n     */\r\n    req.load = function (context, moduleName, url) {\r\n        var config = (context && context.config) || {},\r\n            node;\r\n        if (isBrowser) {\r\n            //In the browser so use a script tag\r\n            node = config.xhtml ?\r\n                   document.createElementNS('http://www.w3.org/1999/xhtml', 'html:script') :\r\n                   document.createElement('script');\r\n            node.type = config.scriptType || 'text/javascript';\r\n            node.charset = 'utf-8';\r\n            node.async = true;\r\n\r\n            node.setAttribute('data-requirecontext', context.contextName);\r\n            node.setAttribute('data-requiremodule', moduleName);\r\n\r\n            //Set up load listener. Test attachEvent first because IE9 has\r\n            //a subtle issue in its addEventListener and script onload firings\r\n            //that do not match the behavior of all other browsers with\r\n            //addEventListener support, which fire the onload event for a\r\n            //script right after the script execution. See:\r\n            //https://connect.microsoft.com/IE/feedback/details/648057/script-onload-event-is-not-fired-immediately-after-script-execution\r\n            //UNFORTUNATELY Opera implements attachEvent but does not follow the script\r\n            //script execution mode.\r\n            if (node.attachEvent &&\r\n                //Check if node.attachEvent is artificially added by custom script or\r\n                //natively supported by browser\r\n                //read https://github.com/jrburke/requirejs/issues/187\r\n                //if we can NOT find [native code] then it must NOT natively supported.\r\n                //in IE8, node.attachEvent does not have toString()\r\n                //Note the test for \"[native code\" with no closing brace, see:\r\n                //https://github.com/jrburke/requirejs/issues/273\r\n                !(node.attachEvent.toString && node.attachEvent.toString().indexOf('[native code') < 0) &&\r\n                !isOpera) {\r\n                //Probably IE. IE (at least 6-8) do not fire\r\n                //script onload right after executing the script, so\r\n                //we cannot tie the anonymous define call to a name.\r\n                //However, IE reports the script as being in 'interactive'\r\n                //readyState at the time of the define call.\r\n                useInteractive = true;\r\n\r\n                node.attachEvent('onreadystatechange', context.onScriptLoad);\r\n                //It would be great to add an error handler here to catch\r\n                //404s in IE9+. However, onreadystatechange will fire before\r\n                //the error handler, so that does not help. If addEvenListener\r\n                //is used, then IE will fire error before load, but we cannot\r\n                //use that pathway given the connect.microsoft.com issue\r\n                //mentioned above about not doing the 'script execute,\r\n                //then fire the script load event listener before execute\r\n                //next script' that other browsers do.\r\n                //Best hope: IE10 fixes the issues,\r\n                //and then destroys all installs of IE 6-9.\r\n                //node.attachEvent('onerror', context.onScriptError);\r\n            } else {\r\n                node.addEventListener('load', context.onScriptLoad, false);\r\n                node.addEventListener('error', context.onScriptError, false);\r\n            }\r\n            node.src = url;\r\n\r\n            //For some cache cases in IE 6-8, the script executes before the end\r\n            //of the appendChild execution, so to tie an anonymous define\r\n            //call to the module name (which is stored on the node), hold on\r\n            //to a reference to this node, but clear after the DOM insertion.\r\n            currentlyAddingScript = node;\r\n            if (baseElement) {\r\n                head.insertBefore(node, baseElement);\r\n            } else {\r\n                head.appendChild(node);\r\n            }\r\n            currentlyAddingScript = null;\r\n\r\n            return node;\r\n        } else if (isWebWorker) {\r\n            //In a web worker, use importScripts. This is not a very\r\n            //efficient use of importScripts, importScripts will block until\r\n            //its script is downloaded and evaluated. However, if web workers\r\n            //are in play, the expectation that a build has been done so that\r\n            //only one script needs to be loaded anyway. This may need to be\r\n            //reevaluated if other use cases become common.\r\n            importScripts(url);\r\n\r\n            //Account for anonymous modules\r\n            context.completeLoad(moduleName);\r\n        }\r\n    };\r\n\r\n    function getInteractiveScript() {\r\n        if (interactiveScript && interactiveScript.readyState === 'interactive') {\r\n            return interactiveScript;\r\n        }\r\n\r\n        eachReverse(scripts(), function (script) {\r\n            if (script.readyState === 'interactive') {\r\n                return (interactiveScript = script);\r\n            }\r\n        });\r\n        return interactiveScript;\r\n    }\r\n\r\n    //Look for a data-main script attribute, which could also adjust the baseUrl.\r\n    if (isBrowser) {\r\n        //Figure out baseUrl. Get it from the script tag with require.js in it.\r\n        eachReverse(scripts(), function (script) {\r\n            //Set the 'head' where we can append children by\r\n            //using the script's parent.\r\n            if (!head) {\r\n                head = script.parentNode;\r\n            }\r\n\r\n            //Look for a data-main attribute to set main script for the page\r\n            //to load. If it is there, the path to data main becomes the\r\n            //baseUrl, if it is not already set.\r\n            dataMain = script.getAttribute('data-main');\r\n            if (dataMain) {\r\n                //Set final baseUrl if there is not already an explicit one.\r\n                if (!cfg.baseUrl) {\r\n                    //Pull off the directory of data-main for use as the\r\n                    //baseUrl.\r\n                    src = dataMain.split('/');\r\n                    mainScript = src.pop();\r\n                    subPath = src.length ? src.join('/')  + '/' : './';\r\n\r\n                    cfg.baseUrl = subPath;\r\n                    dataMain = mainScript;\r\n                }\r\n\r\n                //Strip off any trailing .js since dataMain is now\r\n                //like a module name.\r\n                dataMain = dataMain.replace(jsSuffixRegExp, '');\r\n\r\n                //Put the data-main script in the files to load.\r\n                cfg.deps = cfg.deps ? cfg.deps.concat(dataMain) : [dataMain];\r\n\r\n                return true;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * The function that handles definitions of modules. Differs from\r\n     * require() in that a string for the module should be the first argument,\r\n     * and the function to execute after dependencies are loaded should\r\n     * return a value to define the module corresponding to the first argument's\r\n     * name.\r\n     */\r\n    define = function (name, deps, callback) {\r\n        var node, context;\r\n\r\n        //Allow for anonymous functions\r\n        if (typeof name !== 'string') {\r\n            //Adjust args appropriately\r\n            callback = deps;\r\n            deps = name;\r\n            name = null;\r\n        }\r\n\r\n        //This module may not have dependencies\r\n        if (!isArray(deps)) {\r\n            callback = deps;\r\n            deps = [];\r\n        }\r\n\r\n        //If no name, and callback is a function, then figure out if it a\r\n        //CommonJS thing with dependencies.\r\n        if (!deps.length && isFunction(callback)) {\r\n            //Remove comments from the callback string,\r\n            //look for require calls, and pull them into the dependencies,\r\n            //but only if there are function args.\r\n            if (callback.length) {\r\n                callback\r\n                    .toString()\r\n                    .replace(commentRegExp, '')\r\n                    .replace(cjsRequireRegExp, function (match, dep) {\r\n                        deps.push(dep);\r\n                    });\r\n\r\n                //May be a CommonJS thing even without require calls, but still\r\n                //could use exports, and module. Avoid doing exports and module\r\n                //work though if it just needs require.\r\n                //REQUIRES the function to expect the CommonJS variables in the\r\n                //order listed below.\r\n                deps = (callback.length === 1 ? ['require'] : ['require', 'exports', 'module']).concat(deps);\r\n            }\r\n        }\r\n\r\n        //If in IE 6-8 and hit an anonymous define() call, do the interactive\r\n        //work.\r\n        if (useInteractive) {\r\n            node = currentlyAddingScript || getInteractiveScript();\r\n            if (node) {\r\n                if (!name) {\r\n                    name = node.getAttribute('data-requiremodule');\r\n                }\r\n                context = contexts[node.getAttribute('data-requirecontext')];\r\n            }\r\n        }\r\n\r\n        //Always save off evaluating the def call until the script onload handler.\r\n        //This allows multiple modules to be in a file without prematurely\r\n        //tracing dependencies, and allows for anonymous module support,\r\n        //where the module name is not known until the script onload event\r\n        //occurs. If no context, use the global queue, and get it processed\r\n        //in the onscript load callback.\r\n        (context ? context.defQueue : globalDefQueue).push([name, deps, callback]);\r\n    };\r\n\r\n    define.amd = {\r\n        jQuery: true\r\n    };\r\n\r\n\r\n    /**\r\n     * Executes the text. Normally just uses eval, but can be modified\r\n     * to use a better, environment-specific call. Only used for transpiling\r\n     * loader plugins, not for plain JS modules.\r\n     * @param {String} text the text to execute/evaluate.\r\n     */\r\n    req.exec = function (text) {\r\n        /*jslint evil: true */\r\n        return eval(text);\r\n    };\r\n\r\n    //Set up with config info.\r\n    req(cfg);\r\n}(this));"]],"start1":0,"start2":0,"length1":0,"length2":81768}]],"length":81768}
{"contributors":[],"silentsave":false,"ts":1345913603314,"patch":[[{"diffs":[[0,"ts=4"],[-1,"\r\n * @license RequireJS 2.0.4 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.\r\n * Available via the MIT or new BSD license.\r\n * see: http://github.com/jrburke/requirejs for details\r\n */\r\n/*jslint regexp: true, nomen: true */\r\n/*global window, navigator, document, importScripts, jQuery, setTimeout, opera */\r\n\r\nvar requirejs, require, define;\r\n(function (global) {\r\n    'use strict';\r\n\r\n    var version = '2.0.4',\r\n        commentRegExp = /(\\/\\*([\\s\\S]*?)\\*\\/|([^:]|^)\\/\\/(.*)$)/mg,\r\n        cjsRequireRegExp = /[^.]\\s*require\\s*\\(\\s*[\"']([^'\"\\s]+)[\"']\\s*\\)/g,\r\n        jsSuffixRegExp = /\\.js$/,\r\n        currDirRegExp = /^\\.\\//,\r\n        ostring = Object.prototype.toString,\r\n        ap = Array.prototype,\r\n        aps = ap.slice,\r\n        apsp = ap.splice,\r\n        isBrowser = !!(typeof window !== 'undefined' && navigator && document),\r\n        isWebWorker = !isBrowser && typeof importScripts !== 'undefined',\r\n        //PS3 indicates loaded and complete, but need to wait for complete\r\n        //specifically. Sequence is 'loading', 'loaded', execution,\r\n        // then 'complete'. The UA check is unfortunate, but not sure how\r\n        //to feature test w/o causing perf issues.\r\n        readyRegExp = isBrowser && navigator.platform === 'PLAYSTATION 3' ?\r\n                      /^complete$/ : /^(complete|loaded)$/,\r\n        defContextName = '_',\r\n        //Oh the tragedy, detecting opera. See the usage of isOpera for reason.\r\n        isOpera = typeof opera !== 'undefined' && opera.toString() === '[object Opera]',\r\n        contexts = {},\r\n        cfg = {},\r\n        globalDefQueue = [],\r\n        useInteractive = false,\r\n        req, s, head, baseElement, dataMain, src,\r\n        interactiveScript, currentlyAddingScript, mainScript, subPath;\r\n\r\n    function isFunction(it) {\r\n        return ostring.call(it) === '[object Function]';\r\n    }\r\n\r\n    function isArray(it) {\r\n        return ostring.call(it) === '[object Array]';\r\n    }\r\n\r\n    /**\r\n     * Helper function for iterating over an array. If the func returns\r\n     * a true value, it will break out of the loop.\r\n     */\r\n    function each(ary, func) {\r\n        if (ary) {\r\n            var i;\r\n            for (i = 0; i < ary.length; i += 1) {\r\n                if (ary[i] && func(ary[i], i, ary)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper function for iterating over an array backwards. If the func\r\n     * returns a true value, it will break out of the loop.\r\n     */\r\n    function eachReverse(ary, func) {\r\n        if (ary) {\r\n            var i;\r\n            for (i = ary.length - 1; i > -1; i -= 1) {\r\n                if (ary[i] && func(ary[i], i, ary)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function hasProp(obj, prop) {\r\n        return obj.hasOwnProperty(prop);\r\n    }\r\n\r\n    /**\r\n     * Cycles over properties in an object and calls a function for each\r\n     * property value. If the function returns a truthy value, then the\r\n     * iteration is stopped.\r\n     */\r\n    function eachProp(obj, func) {\r\n        var prop;\r\n        for (prop in obj) {\r\n            if (obj.hasOwnProperty(prop)) {\r\n                if (func(obj[prop], prop)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Simple function to mix in properties from source into target,\r\n     * but only if target does not already have a property of the same name.\r\n     * This is not robust in IE for transferring methods that match\r\n     * Object.prototype names, but the uses of mixin here seem unlikely to\r\n     * trigger a problem related to that.\r\n     */\r\n    function mixin(target, source, force, deepStringMixin) {\r\n        if (source) {\r\n            eachProp(source, function (value, prop) {\r\n                if (force || !hasProp(target, prop)) {\r\n                    if (deepStringMixin && typeof value !== 'string') {\r\n                        if (!target[prop]) {\r\n                            target[prop] = {};\r\n                        }\r\n                        mixin(target[prop], value, force, deepStringMixin);\r\n                    } else {\r\n                        target[prop] = value;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        return target;\r\n    }\r\n\r\n    //Similar to Function.prototype.bind, but the 'this' object is specified\r\n    //first, since it is easier to read/figure out what 'this' will be.\r\n    function bind(obj, fn) {\r\n        return function () {\r\n            return fn.apply(obj, arguments);\r\n        };\r\n    }\r\n\r\n    function scripts() {\r\n        return document.getElementsByTagName('script');\r\n    }\r\n\r\n    //Allow getting a global that expressed in\r\n    //dot notation, like 'a.b.c'.\r\n    function getGlobal(value) {\r\n        if (!value) {\r\n            return value;\r\n        }\r\n        var g = global;\r\n        each(value.split('.'), function (part) {\r\n            g = g[part];\r\n        });\r\n        return g;\r\n    }\r\n\r\n    function makeContextModuleFunc(func, relMap, enableBuildCallback) {\r\n        return function () {\r\n            //A version of a require function that passes a moduleName\r\n            //value for items that may need to\r\n            //look up paths relative to the moduleName\r\n            var args = aps.call(arguments, 0), lastArg;\r\n            if (enableBuildCallback &&\r\n                isFunction((lastArg = args[args.length - 1]))) {\r\n                lastArg.__requireJsBuild = true;\r\n            }\r\n            args.push(relMap);\r\n            return func.apply(null, args);\r\n        };\r\n    }\r\n\r\n    function addRequireMethods(req, context, relMap) {\r\n        each([\r\n            ['toUrl'],\r\n            ['undef'],\r\n            ['defined', 'requireDefined'],\r\n            ['specified', 'requireSpecified']\r\n        ], function (item) {\r\n            var prop = item[1] || item[0];\r\n            req[item[0]] = context ? makeContextModuleFunc(context[prop], relMap) :\r\n                //If no context, then use default context. Reference from\r\n                //contexts instead of early binding to default context, so\r\n                //that during builds, the latest instance of the default\r\n                //context with its config gets used.\r\n                function () {\r\n                    var ctx = contexts[defContextName];\r\n                    return ctx[prop].apply(ctx, arguments);\r\n                };\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Constructs an error with a pointer to an URL with more information.\r\n     * @param {String} id the error ID that maps to an ID on a web page.\r\n     * @param {String} message human readable error.\r\n     * @param {Error} [err] the original error, if there is one.\r\n     *\r\n     * @returns {Error}\r\n     */\r\n    function makeError(id, msg, err, requireModules) {\r\n        var e = new Error(msg + '\\nhttp://requirejs.org/docs/errors.html#' + id);\r\n        e.requireType = id;\r\n        e.requireModules = requireModules;\r\n        if (err) {\r\n            e.originalError = err;\r\n        }\r\n        return e;\r\n    }\r\n\r\n    if (typeof define !== 'undefined') {\r\n        //If a define is already in play via another AMD loader,\r\n        //do not overwrite.\r\n        return;\r\n    }\r\n\r\n    if (typeof requirejs !== 'undefined') {\r\n        if (isFunction(requirejs)) {\r\n            //Do not overwrite and existing requirejs instance.\r\n            return;\r\n        }\r\n        cfg = requirejs;\r\n        requirejs = undefined;\r\n    }\r\n\r\n    //Allow for a require config object\r\n    if (typeof require !== 'undefined' && !isFunction(require)) {\r\n        //assume it is a config object.\r\n        cfg = require;\r\n        require = undefined;\r\n    }\r\n\r\n    function newContext(contextName) {\r\n        var config = {\r\n                waitSeconds: 7,\r\n                baseUrl: './',\r\n                paths: {},\r\n                pkgs: {},\r\n                shim: {}\r\n            },\r\n            registry = {},\r\n            undefEvents = {},\r\n            defQueue = [],\r\n            defined = {},\r\n            urlFetched = {},\r\n            requireCounter = 1,\r\n            unnormalizedCounter = 1,\r\n            //Used to track the order in which modules\r\n            //should be executed, by the order they\r\n            //load. Important for consistent cycle resolution\r\n            //behavior.\r\n            waitAry = [],\r\n            inCheckLoaded, Module, context, handlers,\r\n            checkLoadedTimeoutId;\r\n\r\n        /**\r\n         * Trims the . and .. from an array of path segments.\r\n         * It will keep a leading path segment if a .. will become\r\n         * the first path segment, to help with module name lookups,\r\n         * which act like paths, but can be remapped. But the end result,\r\n         * all paths that use this function should look normalized.\r\n         * NOTE: this method MODIFIES the input array.\r\n         * @param {Array} ary the array of path segments.\r\n         */\r\n        function trimDots(ary) {\r\n            var i, part;\r\n            for (i = 0; ary[i]; i+= 1) {\r\n                part = ary[i];\r\n                if (part === '.') {\r\n                    ary.splice(i, 1);\r\n                    i -= 1;\r\n                } else if (part === '..') {\r\n                    if (i === 1 && (ary[2] === '..' || ary[0] === '..')) {\r\n                        //End of the line. Keep at least one non-dot\r\n                        //path segment at the front so it can be mapped\r\n                        //correctly to disk. Otherwise, there is likely\r\n                        //no path mapping for a path starting with '..'.\r\n                        //This can still fail, but catches the most reasonable\r\n                        //uses of ..\r\n                        break;\r\n                    } else if (i > 0) {\r\n                        ary.splice(i - 1, 2);\r\n                        i -= 2;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Given a relative module name, like ./something, normalize it to\r\n         * a real name that can be mapped to a path.\r\n         * @param {String} name the relative name\r\n         * @param {String} baseName a real name that the name arg is relative\r\n         * to.\r\n         * @param {Boolean} applyMap apply the map config to the value. Should\r\n         * only be done if this normalization is for a dependency ID.\r\n         * @returns {String} normalized name\r\n         */\r\n        function normalize(name, baseName, applyMap) {\r\n            var baseParts = baseName && baseName.split('/'),\r\n                normalizedBaseParts = baseParts,\r\n                map = config.map,\r\n                starMap = map && map['*'],\r\n                pkgName, pkgConfig, mapValue, nameParts, i, j, nameSegment,\r\n                foundMap;\r\n\r\n            //Adjust any relative paths.\r\n            if (name && name.charAt(0) === '.') {\r\n                //If have a base name, try to normalize against it,\r\n                //otherwise, assume it is a top-level require that will\r\n                //be relative to baseUrl in the end.\r\n                if (baseName) {\r\n                    if (config.pkgs[baseName]) {\r\n                        //If the baseName is a package name, then just treat it as one\r\n                        //name to concat the name with.\r\n                        normalizedBaseParts = baseParts = [baseName];\r\n                    } else {\r\n                        //Convert baseName to array, and lop off the last part,\r\n                        //so that . matches that 'directory' and not name of the baseName's\r\n                        //module. For instance, baseName of 'one/two/three', maps to\r\n                        //'one/two/three.js', but we want the directory, 'one/two' for\r\n                        //this normalization.\r\n                        normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);\r\n                    }\r\n\r\n                    name = normalizedBaseParts.concat(name.split('/'));\r\n                    trimDots(name);\r\n\r\n                    //Some use of packages may use a . path to reference the\r\n                    //'main' module name, so normalize for that.\r\n                    pkgConfig = config.pkgs[(pkgName = name[0])];\r\n                    name = name.join('/');\r\n                    if (pkgConfig && name === pkgName + '/' + pkgConfig.main) {\r\n                        name = pkgName;\r\n                    }\r\n                } else if (name.indexOf('./') === 0) {\r\n                    // No baseName, so this is ID is resolved relative\r\n                    // to baseUrl, pull off the leading dot.\r\n                    name = name.substring(2);\r\n                }\r\n            }\r\n\r\n            //Apply map config if available.\r\n            if (applyMap && (baseParts || starMap) && map) {\r\n                nameParts = name.split('/');\r\n\r\n                for (i = nameParts.length; i > 0; i -= 1) {\r\n                    nameSegment = nameParts.slice(0, i).join('/');\r\n\r\n                    if (baseParts) {\r\n                        //Find the longest baseName segment match in the config.\r\n                        //So, do joins on the biggest to smallest lengths of baseParts.\r\n                        for (j = baseParts.length; j > 0; j -= 1) {\r\n                            mapValue = map[baseParts.slice(0, j).join('/')];\r\n\r\n                            //baseName segment has  config, find if it has one for\r\n                            //this name.\r\n                            if (mapValue) {\r\n                                mapValue = mapValue[nameSegment];\r\n                                if (mapValue) {\r\n                                    //Match, update name to the new value.\r\n                                    foundMap = mapValue;\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (!foundMap && starMap && starMap[nameSegment]) {\r\n                        foundMap = starMap[nameSegment];\r\n                    }\r\n\r\n                    if (foundMap) {\r\n                        nameParts.splice(0, i, foundMap);\r\n                        name = nameParts.join('/');\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return name;\r\n        }\r\n\r\n        function removeScript(name) {\r\n            if (isBrowser) {\r\n                each(scripts(), function (scriptNode) {\r\n                    if (scriptNode.getAttribute('data-requiremodule') === name &&\r\n                        scriptNode.getAttribute('data-requirecontext') === context.contextName) {\r\n                        scriptNode.parentNode.removeChild(scriptNode);\r\n                        return true;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        function hasPathFallback(id) {\r\n            var pathConfig = config.paths[id];\r\n            if (pathConfig && isArray(pathConfig) && pathConfig.length > 1) {\r\n                removeScript(id);\r\n                //Pop off the first array value, since it failed, and\r\n                //retry\r\n                pathConfig.shift();\r\n                context.undef(id);\r\n                context.require([id]);\r\n                return true;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Creates a module mapping that includes plugin prefix, module\r\n         * name, and path. If parentModuleMap is provided it will\r\n         * also normalize the name via require.normalize()\r\n         *\r\n         * @param {String} name the module name\r\n         * @param {String} [parentModuleMap] parent module map\r\n         * for the module name, used to resolve relative names.\r\n         * @param {Boolean} isNormalized: is the ID already normalized.\r\n         * This is true if this call is done for a define() module ID.\r\n         * @param {Boolean} applyMap: apply the map config to the ID.\r\n         * Should only be true if this map is for a dependency.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        function makeModuleMap(name, parentModuleMap, isNormalized, applyMap) {\r\n            var index = name ? name.indexOf('!') : -1,\r\n                prefix = null,\r\n                parentName = parentModuleMap ? parentModuleMap.name : null,\r\n                originalName = name,\r\n                isDefine = true,\r\n                normalizedName = '',\r\n                url, pluginModule, suffix;\r\n\r\n            //If no name, then it means it is a require call, generate an\r\n            //internal name.\r\n            if (!name) {\r\n                isDefine = false;\r\n                name = '_@r' + (requireCounter += 1);\r\n            }\r\n\r\n            if (index !== -1) {\r\n                prefix = name.substring(0, index);\r\n                name = name.substring(index + 1, name.length);\r\n            }\r\n\r\n            if (prefix) {\r\n                prefix = normalize(prefix, parentName, applyMap);\r\n                pluginModule = defined[prefix];\r\n            }\r\n\r\n            //Account for relative paths if there is a base name.\r\n            if (name) {\r\n                if (prefix) {\r\n                    if (pluginModule && pluginModule.normalize) {\r\n                        //Plugin is loaded, use its normalize method.\r\n                        normalizedName = pluginModule.normalize(name, function (name) {\r\n                            return normalize(name, parentName, applyMap);\r\n                        });\r\n                    } else {\r\n                        normalizedName = normalize(name, parentName, applyMap);\r\n                    }\r\n                } else {\r\n                    //A regular module.\r\n                    normalizedName = normalize(name, parentName, applyMap);\r\n                    url = context.nameToUrl(normalizedName);\r\n                }\r\n            }\r\n\r\n            //If the id is a plugin id that cannot be determined if it needs\r\n            //normalization, stamp it with a unique ID so two matching relative\r\n            //ids that may conflict can be separate.\r\n            suffix = prefix && !pluginModule && !isNormalized ?\r\n                     '_unnormalized' + (unnormalizedCounter += 1) :\r\n                     '';\r\n\r\n            return {\r\n                prefix: prefix,\r\n                name: normalizedName,\r\n                parentMap: parentModuleMap,\r\n                unnormalized: !!suffix,\r\n                url: url,\r\n                originalName: originalName,\r\n                isDefine: isDefine,\r\n                id: (prefix ?\r\n                    prefix + '!' + normalizedName :\r\n                    normalizedName) + suffix\r\n            };\r\n        }\r\n\r\n        function getModule(depMap) {\r\n            var id = depMap.id,\r\n                mod = registry[id];\r\n\r\n            if (!mod) {\r\n                mod = registry[id] = new context.Module(depMap);\r\n            }\r\n\r\n            return mod;\r\n        }\r\n\r\n        function on(depMap, name, fn) {\r\n            var id = depMap.id,\r\n                mod = registry[id];\r\n\r\n            if (hasProp(defined, id) &&\r\n                (!mod || mod.defineEmitComplete)) {\r\n                if (name === 'defined') {\r\n                    fn(defined[id]);\r\n                }\r\n            } else {\r\n                getModule(depMap).on(name, fn);\r\n            }\r\n        }\r\n\r\n        function onError(err, errback) {\r\n            var ids = err.requireModules,\r\n                notified = false;\r\n\r\n            if (errback) {\r\n                errback(err);\r\n            } else {\r\n                each(ids, function (id) {\r\n                    var mod = registry[id];\r\n                    if (mod) {\r\n                        //Set error on module, so it skips timeout checks.\r\n                        mod.error = err;\r\n                        if (mod.events.error) {\r\n                            notified = true;\r\n                            mod.emit('error', err);\r\n                        }\r\n                    }\r\n                });\r\n\r\n                if (!notified) {\r\n                    req.onError(err);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Internal method to transfer globalQueue items to this context's\r\n         * defQueue.\r\n         */\r\n        function takeGlobalQueue() {\r\n            //Push all the globalDefQueue items into the context's defQueue\r\n            if (globalDefQueue.length) {\r\n                //Array splice in the values since the context code has a\r\n                //local var ref to defQueue, so cannot just reassign the one\r\n                //on context.\r\n                apsp.apply(defQueue,\r\n                           [defQueue.length - 1, 0].concat(globalDefQueue));\r\n                globalDefQueue = [];\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Helper function that creates a require function object to give to\r\n         * modules that ask for it as a dependency. It needs to be specific\r\n         * per module because of the implication of path mappings that may\r\n         * need to be relative to the module name.\r\n         */\r\n        function makeRequire(mod, enableBuildCallback, altRequire) {\r\n            var relMap = mod && mod.map,\r\n                modRequire = makeContextModuleFunc(altRequire || context.require,\r\n                                                   relMap,\r\n                                                   enableBuildCallback);\r\n\r\n            addRequireMethods(modRequire, context, relMap);\r\n            modRequire.isBrowser = isBrowser;\r\n\r\n            return modRequire;\r\n        }\r\n\r\n        handlers = {\r\n            'require': function (mod) {\r\n                return makeRequire(mod);\r\n            },\r\n            'exports': function (mod) {\r\n                mod.usingExports = true;\r\n                if (mod.map.isDefine) {\r\n                    return (mod.exports = defined[mod.map.id] = {});\r\n                }\r\n            },\r\n            'module': function (mod) {\r\n                return (mod.module = {\r\n                    id: mod.map.id,\r\n                    uri: mod.map.url,\r\n                    config: function () {\r\n                        return (config.config && config.config[mod.map.id]) || {};\r\n                    },\r\n                    exports: defined[mod.map.id]\r\n                });\r\n            }\r\n        };\r\n\r\n        function removeWaiting(id) {\r\n            //Clean up machinery used for waiting modules.\r\n            delete registry[id];\r\n\r\n            each(waitAry, function (mod, i) {\r\n                if (mod.map.id === id) {\r\n                    waitAry.splice(i, 1);\r\n                    if (!mod.defined) {\r\n                        context.waitCount -= 1;\r\n                    }\r\n                    return true;\r\n                }\r\n            });\r\n        }\r\n\r\n        function findCycle(mod, traced) {\r\n            var id = mod.map.id,\r\n                depArray = mod.depMaps,\r\n                foundModule;\r\n\r\n            //Do not bother with unitialized modules or not yet enabled\r\n            //modules.\r\n            if (!mod.inited) {\r\n                return;\r\n            }\r\n\r\n            //Found the cycle.\r\n            if (traced[id]) {\r\n                return mod;\r\n            }\r\n\r\n            traced[id] = true;\r\n\r\n            //Trace through the dependencies.\r\n            each(depArray, function (depMap) {\r\n                var depId = depMap.id,\r\n                    depMod = registry[depId];\r\n\r\n                if (!depMod) {\r\n                    return;\r\n                }\r\n\r\n                if (!depMod.inited || !depMod.enabled) {\r\n                    //Dependency is not inited, so this cannot\r\n                    //be used to determine a cycle.\r\n                    foundModule = null;\r\n                    delete traced[id];\r\n                    return true;\r\n                }\r\n\r\n                //mixin traced to a new object for each dependency, so that\r\n                //sibling dependencies in this object to not generate a\r\n                //false positive match on a cycle. Ideally an Object.create\r\n                //type of prototype delegation would be used here, but\r\n                //optimizing for file size vs. execution speed since hopefully\r\n                //the trees are small for circular dependency scans relative\r\n                //to the full app perf.\r\n                return (foundModule = findCycle(depMod, mixin({}, traced)));\r\n            });\r\n\r\n            return foundModule;\r\n        }\r\n\r\n        function forceExec(mod, traced, uninited) {\r\n            var id = mod.map.id,\r\n                depArray = mod.depMaps;\r\n\r\n            if (!mod.inited || !mod.map.isDefine) {\r\n                return;\r\n            }\r\n\r\n            if (traced[id]) {\r\n                return defined[id];\r\n            }\r\n\r\n            traced[id] = mod;\r\n\r\n            each(depArray, function(depMap) {\r\n                var depId = depMap.id,\r\n                    depMod = registry[depId],\r\n                    value;\r\n\r\n                if (handlers[depId]) {\r\n                    return;\r\n                }\r\n\r\n                if (depMod) {\r\n                    if (!depMod.inited || !depMod.enabled) {\r\n                        //Dependency is not inited,\r\n                        //so this module cannot be\r\n                        //given a forced value yet.\r\n                        uninited[id] = true;\r\n                        return;\r\n                    }\r\n\r\n                    //Get the value for the current dependency\r\n                    value = forceExec(depMod, traced, uninited);\r\n\r\n                    //Even with forcing it may not be done,\r\n                    //in particular if the module is waiting\r\n                    //on a plugin resource.\r\n                    if (!uninited[depId]) {\r\n                        mod.defineDepById(depId, value);\r\n                    }\r\n                }\r\n            });\r\n\r\n            mod.check(true);\r\n\r\n            return defined[id];\r\n        }\r\n\r\n        function modCheck(mod) {\r\n            mod.check();\r\n        }\r\n\r\n        function checkLoaded() {\r\n            var waitInterval = config.waitSeconds * 1000,\r\n                //It is possible to disable the wait interval by using waitSeconds of 0.\r\n                expired = waitInterval && (context.startTime + waitInterval) < new Date().getTime(),\r\n                noLoads = [],\r\n                stillLoading = false,\r\n                needCycleCheck = true,\r\n                map, modId, err, usingPathFallback;\r\n\r\n            //Do not bother if this call was a result of a cycle break.\r\n            if (inCheckLoaded) {\r\n                return;\r\n            }\r\n\r\n            inCheckLoaded = true;\r\n\r\n            //Figure out the state of all the modules.\r\n            eachProp(registry, function (mod) {\r\n                map = mod.map;\r\n                modId = map.id;\r\n\r\n                //Skip things that are not enabled or in error state.\r\n                if (!mod.enabled) {\r\n                    return;\r\n                }\r\n\r\n                if (!mod.error) {\r\n                    //If the module should be executed, and it has not\r\n                    //been inited and time is up, remember it.\r\n                    if (!mod.inited && expired) {\r\n                        if (hasPathFallback(modId)) {\r\n                            usingPathFallback = true;\r\n                            stillLoading = true;\r\n                        } else {\r\n                            noLoads.push(modId);\r\n                            removeScript(modId);\r\n                        }\r\n                    } else if (!mod.inited && mod.fetched && map.isDefine) {\r\n                        stillLoading = true;\r\n                        if (!map.prefix) {\r\n                            //No reason to keep looking for unfinished\r\n                            //loading. If the only stillLoading is a\r\n                            //plugin resource though, keep going,\r\n                            //because it may be that a plugin resource\r\n                            //is waiting on a non-plugin cycle.\r\n                            return (needCycleCheck = false);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n\r\n            if (expired && noLoads.length) {\r\n                //If wait time expired, throw error of unloaded modules.\r\n                err = makeError('timeout', 'Load timeout for modules: ' + noLoads, null, noLoads);\r\n                err.contextName = context.contextName;\r\n                return onError(err);\r\n            }\r\n\r\n            //Not expired, check for a cycle.\r\n            if (needCycleCheck) {\r\n\r\n                each(waitAry, function (mod) {\r\n                    if (mod.defined) {\r\n                        return;\r\n                    }\r\n\r\n                    var cycleMod = findCycle(mod, {}),\r\n                        traced = {};\r\n\r\n                    if (cycleMod) {\r\n                        forceExec(cycleMod, traced, {});\r\n\r\n                        //traced modules may have been\r\n                        //removed from the registry, but\r\n                        //their listeners still need to\r\n                        //be called.\r\n                        eachProp(traced, modCheck);\r\n                    }\r\n                });\r\n\r\n                //Now that dependencies have\r\n                //been satisfied, trigger the\r\n                //completion check that then\r\n                //notifies listeners.\r\n                eachProp(registry, modCheck);\r\n            }\r\n\r\n            //If still waiting on loads, and the waiting load is something\r\n            //other than a plugin resource, or there are still outstanding\r\n            //scripts, then just try back later.\r\n            if ((!expired || usingPathFallback) && stillLoading) {\r\n                //Something is still waiting to load. Wait for it, but only\r\n                //if a timeout is not already in effect.\r\n                if ((isBrowser || isWebWorker) && !checkLoadedTimeoutId) {\r\n                    checkLoadedTimeoutId = setTimeout(function () {\r\n                        checkLoadedTimeoutId = 0;\r\n                        checkLoaded();\r\n                    }, 50);\r\n                }\r\n            }\r\n\r\n            inCheckLoaded = false;\r\n        }\r\n\r\n        Module = function (map) {\r\n            this.events = undefEvents[map.id] || {};\r\n            this.map = map;\r\n            this.shim = config.shim[map.id];\r\n            this.depExports = [];\r\n            this.depMaps = [];\r\n            this.depMatched = [];\r\n            this.pluginMaps = {};\r\n            this.depCount = 0;\r\n\r\n            /* this.exports this.factory\r\n               this.depMaps = [],\r\n               this.enabled, this.fetched\r\n            */\r\n        };\r\n\r\n        Module.prototype = {\r\n            init: function(depMaps, factory, errback, options) {\r\n                options = options || {};\r\n\r\n                //Do not do more inits if already done. Can happen if there\r\n                //are multiple define calls for the same module. That is not\r\n                //a normal, common case, but it is also not unexpected.\r\n                if (this.inited) {\r\n                    return;\r\n                }\r\n\r\n                this.factory = factory;\r\n\r\n                if (errback) {\r\n                    //Register for errors on this module.\r\n                    this.on('error', errback);\r\n                } else if (this.events.error) {\r\n                    //If no errback already, but there are error listeners\r\n                    //on this module, set up an errback to pass to the deps.\r\n                    errback = bind(this, function (err) {\r\n                        this.emit('error', err);\r\n                    });\r\n                }\r\n\r\n                //Do a copy of the dependency array, so that\r\n                //source inputs are not modified. For example\r\n                //\"shim\" deps are passed in here directly, and\r\n                //doing a direct modification of the depMaps array\r\n                //would affect that config.\r\n                this.depMaps = depMaps && depMaps.slice(0);\r\n                this.depMaps.rjsSkipMap = depMaps.rjsSkipMap;\r\n\r\n                this.errback = errback;\r\n\r\n                //Indicate this module has be initialized\r\n                this.inited = true;\r\n\r\n                this.ignore = options.ignore;\r\n\r\n                //Could have option to init this module in enabled mode,\r\n                //or could have been previously marked as enabled. However,\r\n                //the dependencies are not known until init is called. So\r\n                //if enabled previously, now trigger dependencies as enabled.\r\n                if (options.enabled || this.enabled) {\r\n                    //Enable this module and dependencies.\r\n                    //Will call this.check()\r\n                    this.enable();\r\n                } else {\r\n                    this.check();\r\n                }\r\n            },\r\n\r\n            defineDepById: function (id, depExports) {\r\n                var i;\r\n\r\n                //Find the index for this dependency.\r\n                each(this.depMaps, function (map, index) {\r\n                    if (map.id === id) {\r\n                        i = index;\r\n                        return true;\r\n                    }\r\n                });\r\n\r\n                return this.defineDep(i, depExports);\r\n            },\r\n\r\n            defineDep: function (i, depExports) {\r\n                //Because of cycles, defined callback for a given\r\n                //export can be called more than once.\r\n                if (!this.depMatched[i]) {\r\n                    this.depMatched[i] = true;\r\n                    this.depCount -= 1;\r\n                    this.depExports[i] = depExports;\r\n                }\r\n            },\r\n\r\n            fetch: function () {\r\n                if (this.fetched) {\r\n                    return;\r\n                }\r\n                this.fetched = true;\r\n\r\n                context.startTime = (new Date()).getTime();\r\n\r\n                var map = this.map;\r\n\r\n                //If the manager is for a plugin managed resource,\r\n                //ask the plugin to load it now.\r\n                if (this.shim) {\r\n                    makeRequire(this, true)(this.shim.deps || [], bind(this, function () {\r\n                        return map.prefix ? this.callPlugin() : this.load();\r\n                    }));\r\n                } else {\r\n                    //Regular dependency.\r\n                    return map.prefix ? this.callPlugin() : this.load();\r\n                }\r\n            },\r\n\r\n            load: function() {\r\n                var url = this.map.url;\r\n\r\n                //Regular dependency.\r\n                if (!urlFetched[url]) {\r\n                    urlFetched[url] = true;\r\n                    context.load(this.map.id, url);\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Checks is the module is ready to define itself, and if so,\r\n             * define it. If the silent argument is true, then it will just\r\n             * define, but not notify listeners, and not ask for a context-wide\r\n             * check of all loaded modules. That is useful for cycle breaking.\r\n             */\r\n            check: function (silent) {\r\n                if (!this.enabled || this.enabling) {\r\n                    return;\r\n                }\r\n\r\n                var id = this.map.id,\r\n                    depExports = this.depExports,\r\n                    exports = this.exports,\r\n                    factory = this.factory,\r\n                    err, cjsModule;\r\n\r\n                if (!this.inited) {\r\n                    this.fetch();\r\n                } else if (this.error) {\r\n                    this.emit('error', this.error);\r\n                } else if (!this.defining) {\r\n                    //The factory could trigger another require call\r\n                    //that would result in checking this module to\r\n                    //define itself again. If already in the process\r\n                    //of doing that, skip this work.\r\n                    this.defining = true;\r\n\r\n                    if (this.depCount < 1 && !this.defined) {\r\n                        if (isFunction(factory)) {\r\n                            //If there is an error listener, favor passing\r\n                            //to that instead of throwing an error.\r\n                            if (this.events.error) {\r\n                                try {\r\n                                    exports = context.execCb(id, factory, depExports, exports);\r\n                                } catch (e) {\r\n                                    err = e;\r\n                                }\r\n                            } else {\r\n                                exports = context.execCb(id, factory, depExports, exports);\r\n                            }\r\n\r\n                            if (this.map.isDefine) {\r\n                                //If setting exports via 'module' is in play,\r\n                                //favor that over return value and exports. After that,\r\n                                //favor a non-undefined return value over exports use.\r\n                                cjsModule = this.module;\r\n                                if (cjsModule &&\r\n                                    cjsModule.exports !== undefined &&\r\n                                    //Make sure it is not already the exports value\r\n                                    cjsModule.exports !== this.exports) {\r\n                                    exports = cjsModule.exports;\r\n                                } else if (exports === undefined && this.usingExports) {\r\n                                    //exports already set the defined value.\r\n                                    exports = this.exports;\r\n                                }\r\n                            }\r\n\r\n                            if (err) {\r\n                                err.requireMap = this.map;\r\n                                err.requireModules = [this.map.id];\r\n                                err.requireType = 'define';\r\n                                return onError((this.error = err));\r\n                            }\r\n\r\n                        } else {\r\n                            //Just a literal value\r\n                            exports = factory;\r\n                        }\r\n\r\n                        this.exports = exports;\r\n\r\n                        if (this.map.isDefine && !this.ignore) {\r\n                            defined[id] = exports;\r\n\r\n                            if (req.onResourceLoad) {\r\n                                req.onResourceLoad(context, this.map, this.depMaps);\r\n                            }\r\n                        }\r\n\r\n                        //Clean up\r\n                        delete registry[id];\r\n\r\n                        this.defined = true;\r\n                        context.waitCount -= 1;\r\n                        if (context.waitCount === 0) {\r\n                            //Clear the wait array used for cycles.\r\n                            waitAry = [];\r\n                        }\r\n                    }\r\n\r\n                    //Finished the define stage. Allow calling check again\r\n                    //to allow define notifications below in the case of a\r\n                    //cycle.\r\n                    this.defining = false;\r\n\r\n                    if (!silent) {\r\n                        if (this.defined && !this.defineEmitted) {\r\n                            this.defineEmitted = true;\r\n                            this.emit('defined', this.exports);\r\n                            this.defineEmitComplete = true;\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n\r\n            callPlugin: function() {\r\n                var map = this.map,\r\n                    id = map.id,\r\n                    pluginMap = makeModuleMap(map.prefix, null, false, true);\r\n\r\n                on(pluginMap, 'defined', bind(this, function (plugin) {\r\n                    var name = this.map.name,\r\n                        parentName = this.map.parentMap ? this.map.parentMap.name : null,\r\n                        load, normalizedMap, normalizedMod;\r\n\r\n                    //If current map is not normalized, wait for that\r\n                    //normalized name to load instead of continuing.\r\n                    if (this.map.unnormalized) {\r\n                        //Normalize the ID if the plugin allows it.\r\n                        if (plugin.normalize) {\r\n                            name = plugin.normalize(name, function (name) {\r\n                                return normalize(name, parentName, true);\r\n                            }) || '';\r\n                        }\r\n\r\n                        normalizedMap = makeModuleMap(map.prefix + '!' + name,\r\n                                                      this.map.parentMap,\r\n                                                      false,\r\n                                                      true);\r\n                        on(normalizedMap,\r\n                           'defined', bind(this, function (value) {\r\n                            this.init([], function () { return value; }, null, {\r\n                                enabled: true,\r\n                                ignore: true\r\n                            });\r\n                        }));\r\n                        normalizedMod = registry[normalizedMap.id];\r\n                        if (normalizedMod) {\r\n                            if (this.events.error) {\r\n                                normalizedMod.on('error', bind(this, function (err) {\r\n                                    this.emit('error', err);\r\n                                }));\r\n                            }\r\n                            normalizedMod.enable();\r\n                        }\r\n\r\n                        return;\r\n                    }\r\n\r\n                    load = bind(this, function (value) {\r\n                        this.init([], function () { return value; }, null, {\r\n                            enabled: true\r\n                        });\r\n                    });\r\n\r\n                    load.error = bind(this, function (err) {\r\n                        this.inited = true;\r\n                        this.error = err;\r\n                        err.requireModules = [id];\r\n\r\n                        //Remove temp unnormalized modules for this module,\r\n                        //since they will never be resolved otherwise now.\r\n                        eachProp(registry, function (mod) {\r\n                            if (mod.map.id.indexOf(id + '_unnormalized') === 0) {\r\n                                removeWaiting(mod.map.id);\r\n                            }\r\n                        });\r\n\r\n                        onError(err);\r\n                    });\r\n\r\n                    //Allow plugins to load other code without having to know the\r\n                    //context or how to 'complete' the load.\r\n                    load.fromText = function (moduleName, text) {\r\n                        /*jslint evil: true */\r\n                        var hasInteractive = useInteractive;\r\n\r\n                        //Turn off interactive script matching for IE for any define\r\n                        //calls in the text, then turn it back on at the end.\r\n                        if (hasInteractive) {\r\n                            useInteractive = false;\r\n                        }\r\n\r\n                        //Prime the system by creating a module instance for\r\n                        //it.\r\n                        getModule(makeModuleMap(moduleName));\r\n\r\n                        req.exec(text);\r\n\r\n                        if (hasInteractive) {\r\n                            useInteractive = true;\r\n                        }\r\n\r\n                        //Support anonymous modules.\r\n                        context.completeLoad(moduleName);\r\n                    };\r\n\r\n                    //Use parentName here since the plugin's name is not reliable,\r\n                    //could be some weird string with no path that actually wants to\r\n                    //reference the parentName's path.\r\n                    plugin.load(map.name, makeRequire(map.parentMap, true, function (deps, cb) {\r\n                        deps.rjsSkipMap = true;\r\n                        return context.require(deps, cb);\r\n                    }), load, config);\r\n                }));\r\n\r\n                context.enable(pluginMap, this);\r\n                this.pluginMaps[pluginMap.id] = pluginMap;\r\n            },\r\n\r\n            enable: function () {\r\n                this.enabled = true;\r\n\r\n                if (!this.waitPushed) {\r\n                    waitAry.push(this);\r\n                    context.waitCount += 1;\r\n                    this.waitPushed = true;\r\n                }\r\n\r\n                //Set flag mentioning that the module is enabling,\r\n                //so that immediate calls to the defined callbacks\r\n                //for dependencies do not trigger inadvertent load\r\n                //with the depCount still being zero.\r\n                this.enabling = true;\r\n\r\n                //Enable each dependency\r\n                each(this.depMaps, bind(this, function (depMap, i) {\r\n                    var id, mod, handler;\r\n\r\n                    if (typeof depMap === 'string') {\r\n                        //Dependency needs to be converted to a depMap\r\n                        //and wired up to this module.\r\n                        depMap = makeModuleMap(depMap,\r\n                                               (this.map.isDefine ? this.map : this.map.parentMap),\r\n                                               false,\r\n                                               !this.depMaps.rjsSkipMap);\r\n                        this.depMaps[i] = depMap;\r\n\r\n                        handler = handlers[depMap.id];\r\n\r\n                        if (handler) {\r\n                            this.depExports[i] = handler(this);\r\n                            return;\r\n                        }\r\n\r\n                        this.depCount += 1;\r\n\r\n                        on(depMap, 'defined', bind(this, function (depExports) {\r\n                            this.defineDep(i, depExports);\r\n                            this.check();\r\n                        }));\r\n\r\n                        if (this.errback) {\r\n                            on(depMap, 'error', this.errback);\r\n                        }\r\n                    }\r\n\r\n                    id = depMap.id;\r\n                    mod = registry[id];\r\n\r\n                    //Skip special modules like 'require', 'exports', 'module'\r\n                    //Also, don't call enable if it is already enabled,\r\n                    //important in circular dependency cases.\r\n                    if (!handlers[id] && mod && !mod.enabled) {\r\n                        context.enable(depMap, this);\r\n                    }\r\n                }));\r\n\r\n                //Enable each plugin that is used in\r\n                //a dependency\r\n                eachProp(this.pluginMaps, bind(this, function (pluginMap) {\r\n                    var mod = registry[pluginMap.id];\r\n                    if (mod && !mod.enabled) {\r\n                        context.enable(pluginMap, this);\r\n                    }\r\n                }));\r\n\r\n                this.enabling = false;\r\n\r\n                this.check();\r\n            },\r\n\r\n            on: function(name, cb) {\r\n                var cbs = this.events[name];\r\n                if (!cbs) {\r\n                    cbs = this.events[name] = [];\r\n                }\r\n                cbs.push(cb);\r\n            },\r\n\r\n            emit: function (name, evt) {\r\n                each(this.events[name], function (cb) {\r\n                    cb(evt);\r\n                });\r\n                if (name === 'error') {\r\n                    //Now that the error handler was triggered, remove\r\n                    //the listeners, since this broken Module instance\r\n                    //can stay around for a while in the registry/waitAry.\r\n                    delete this.events[name];\r\n                }\r\n            }\r\n        };\r\n\r\n        function callGetModule(args) {\r\n            getModule(makeModuleMap(args[0], null, true)).init(args[1], args[2]);\r\n        }\r\n\r\n        function removeListener(node, func, name, ieName) {\r\n            //Favor detachEvent because of IE9\r\n            //issue, see attachEvent/addEventListener comment elsewhere\r\n            //in this file.\r\n            if (node.detachEvent && !isOpera) {\r\n                //Probably IE. If not it will throw an error, which will be\r\n                //useful to know.\r\n                if (ieName) {\r\n                    node.detachEvent(ieName, func);\r\n                }\r\n            } else {\r\n                node.removeEventListener(name, func, false);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Given an event from a script node, get the requirejs info from it,\r\n         * and then removes the event listeners on the node.\r\n         * @param {Event} evt\r\n         * @returns {Object}\r\n         */\r\n        function getScriptData(evt) {\r\n            //Using currentTarget instead of target for Firefox 2.0's sake. Not\r\n            //all old browsers will be supported, but this one was easy enough\r\n            //to support and still makes sense.\r\n            var node = evt.currentTarget || evt.srcElement;\r\n\r\n            //Remove the listeners once here.\r\n            removeListener(node, context.onScriptLoad, 'load', 'onreadystatechange');\r\n            removeListener(node, context.onScriptError, 'error');\r\n\r\n            return {\r\n                node: node,\r\n                id: node && node.getAttribute('data-requiremodule')\r\n            };\r\n        }\r\n\r\n        return (context = {\r\n            config: config,\r\n            contextName: contextName,\r\n            registry: registry,\r\n            defined: defined,\r\n            urlFetched: urlFetched,\r\n            waitCount: 0,\r\n            defQueue: defQueue,\r\n            Module: Module,\r\n            makeModuleMap: makeModuleMap,\r\n\r\n            /**\r\n             * Set a configuration for the context.\r\n             * @param {Object} cfg config object to integrate.\r\n             */\r\n            configure: function (cfg) {\r\n                //Make sure the baseUrl ends in a slash.\r\n                if (cfg.baseUrl) {\r\n                    if (cfg.baseUrl.charAt(cfg.baseUrl.length - 1) !== '/') {\r\n                        cfg.baseUrl += '/';\r\n                    }\r\n                }\r\n\r\n                //Save off the paths and packages since they require special processing,\r\n                //they are additive.\r\n                var pkgs = config.pkgs,\r\n                    shim = config.shim,\r\n                    paths = config.paths,\r\n                    map = config.map;\r\n\r\n                //Mix in the config values, favoring the new values over\r\n                //existing ones in context.config.\r\n                mixin(config, cfg, true);\r\n\r\n                //Merge paths.\r\n                config.paths = mixin(paths, cfg.paths, true);\r\n\r\n                //Merge map\r\n                if (cfg.map) {\r\n                    config.map = mixin(map || {}, cfg.map, true, true);\r\n                }\r\n\r\n                //Merge shim\r\n                if (cfg.shim) {\r\n                    eachProp(cfg.shim, function (value, id) {\r\n                        //Normalize the structure\r\n                        if (isArray(value)) {\r\n                            value = {\r\n                                deps: value\r\n                            };\r\n                        }\r\n                        if (value.exports && !value.exports.__buildReady) {\r\n                            value.exports = context.makeShimExports(value.exports);\r\n                        }\r\n                        shim[id] = value;\r\n                    });\r\n                    config.shim = shim;\r\n                }\r\n\r\n                //Adjust packages if necessary.\r\n                if (cfg.packages) {\r\n                    each(cfg.packages, function (pkgObj) {\r\n                        var location;\r\n\r\n                        pkgObj = typeof pkgObj === 'string' ? { name: pkgObj } : pkgObj;\r\n                        location = pkgObj.location;\r\n\r\n                        //Create a brand new object on pkgs, since currentPackages can\r\n                        //be passed in again, and config.pkgs is the internal transformed\r\n                        //state for all package configs.\r\n                        pkgs[pkgObj.name] = {\r\n                            name: pkgObj.name,\r\n                            location: location || pkgObj.name,\r\n                            //Remove leading dot in main, so main paths are normalized,\r\n                            //and remove any trailing .js, since different package\r\n                            //envs have different conventions: some use a module name,\r\n                            //some use a file name.\r\n                            main: (pkgObj.main || 'main')\r\n                                  .replace(currDirRegExp, '')\r\n                                  .replace(jsSuffixRegExp, '')\r\n                        };\r\n                    });\r\n\r\n                    //Done with modifications, assing packages back to context config\r\n                    config.pkgs = pkgs;\r\n                }\r\n\r\n                //If there are any \"waiting to execute\" modules in the registry,\r\n                //update the maps for them, since their info, like URLs to load,\r\n                //may have changed.\r\n                eachProp(registry, function (mod, id) {\r\n                    mod.map = makeModuleMap(id);\r\n                });\r\n\r\n                //If a deps array or a config callback is specified, then call\r\n                //require with those args. This is useful when require is defined as a\r\n                //config object before require.js is loaded.\r\n                if (cfg.deps || cfg.callback) {\r\n                    context.require(cfg.deps || [], cfg.callback);\r\n                }\r\n            },\r\n\r\n            makeShimExports: function (exports) {\r\n                var func;\r\n                if (typeof exports === 'string') {\r\n                    func = function () {\r\n                        return getGlobal(exports);\r\n                    };\r\n                    //Save the exports for use in nodefine checking.\r\n                    func.exports = exports;\r\n                    return func;\r\n                } else {\r\n                    return function () {\r\n                        return exports.apply(global, arguments);\r\n                    };\r\n                }\r\n            },\r\n\r\n            requireDefined: function (id, relMap) {\r\n                return hasProp(defined, makeModuleMap(id, relMap, false, true).id);\r\n            },\r\n\r\n            requireSpecified: function (id, relMap) {\r\n                id = makeModuleMap(id, relMap, false, true).id;\r\n                return hasProp(defined, id) || hasProp(registry, id);\r\n            },\r\n\r\n            require: function (deps, callback, errback, relMap) {\r\n                var moduleName, id, map, requireMod, args;\r\n                if (typeof deps === 'string') {\r\n                    if (isFunction(callback)) {\r\n                        //Invalid call\r\n                        return onError(makeError('requireargs', 'Invalid require call'), errback);\r\n                    }\r\n\r\n                    //Synchronous access to one module. If require.get is\r\n                    //available (as in the Node adapter), prefer that.\r\n                    //In this case deps is the moduleName and callback is\r\n                    //the relMap\r\n                    if (req.get) {\r\n                        return req.get(context, deps, callback);\r\n                    }\r\n\r\n                    //Just return the module wanted. In this scenario, the\r\n                    //second arg (if passed) is just the relMap.\r\n                    moduleName = deps;\r\n                    relMap = callback;\r\n\r\n                    //Normalize module name, if it contains . or ..\r\n                    map = makeModuleMap(moduleName, relMap, false, true);\r\n                    id = map.id;\r\n\r\n                    if (!hasProp(defined, id)) {\r\n                        return onError(makeError('notloaded', 'Module name \"' +\r\n                                    id +\r\n                                    '\" has not been loaded yet for context: ' +\r\n                                    contextName));\r\n                    }\r\n                    return defined[id];\r\n                }\r\n\r\n                //Callback require. Normalize args. if callback or errback is\r\n                //not a function, it means it is a relMap. Test errback first.\r\n                if (errback && !isFunction(errback)) {\r\n                    relMap = errback;\r\n                    errback = undefined;\r\n                }\r\n                if (callback && !isFunction(callback)) {\r\n                    relMap = callback;\r\n                    callback = undefined;\r\n                }\r\n\r\n                //Any defined modules in the global queue, intake them now.\r\n                takeGlobalQueue();\r\n\r\n                //Make sure any remaining defQueue items get properly processed.\r\n                while (defQueue.length) {\r\n                    args = defQueue.shift();\r\n                    if (args[0] === null) {\r\n                        return onError(makeError('mismatch', 'Mismatched anonymous define() module: ' + args[args.length - 1]));\r\n                    } else {\r\n                        //args are id, deps, factory. Should be normalized by the\r\n                        //define() function.\r\n                        callGetModule(args);\r\n                    }\r\n                }\r\n\r\n                //Mark all the dependencies as needing to be loaded.\r\n                requireMod = getModule(makeModuleMap(null, relMap));\r\n\r\n                requireMod.init(deps, callback, errback, {\r\n                    enabled: true\r\n                });\r\n\r\n                checkLoaded();\r\n\r\n                return context.require;\r\n            },\r\n\r\n            undef: function (id) {\r\n                var map = makeModuleMap(id, null, true),\r\n                    mod = registry[id];\r\n\r\n                delete defined[id];\r\n                delete urlFetched[map.url];\r\n                delete undefEvents[id];\r\n\r\n                if (mod) {\r\n                    //Hold on to listeners in case the\r\n                    //module will be attempted to be reloaded\r\n                    //using a different config.\r\n                    if (mod.events.defined) {\r\n                        undefEvents[id] = mod.events;\r\n                    }\r\n\r\n                    removeWaiting(id);\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Called to enable a module if it is still in the registry\r\n             * awaiting enablement. parent module is passed in for context,\r\n             * used by the optimizer.\r\n             */\r\n            enable: function (depMap, parent) {\r\n                var mod = registry[depMap.id];\r\n                if (mod) {\r\n                    getModule(depMap).enable();\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Internal method used by environment adapters to complete a load event.\r\n             * A load event could be a script load or just a load pass from a synchronous\r\n             * load call.\r\n             * @param {String} moduleName the name of the module to potentially complete.\r\n             */\r\n            completeLoad: function (moduleName) {\r\n                var shim = config.shim[moduleName] || {},\r\n                shExports = shim.exports && shim.exports.exports,\r\n                found, args, mod;\r\n\r\n                takeGlobalQueue();\r\n\r\n                while (defQueue.length) {\r\n                    args = defQueue.shift();\r\n                    if (args[0] === null) {\r\n                        args[0] = moduleName;\r\n                        //If already found an anonymous module and bound it\r\n                        //to this name, then this is some other anon module\r\n                        //waiting for its completeLoad to fire.\r\n                        if (found) {\r\n                            break;\r\n                        }\r\n                        found = true;\r\n                    } else if (args[0] === moduleName) {\r\n                        //Found matching define call for this script!\r\n                        found = true;\r\n                    }\r\n\r\n                    callGetModule(args);\r\n                }\r\n\r\n                //Do this after the cycle of callGetModule in case the result\r\n                //of those calls/init calls changes the registry.\r\n                mod = registry[moduleName];\r\n\r\n                if (!found &&\r\n                    !defined[moduleName] &&\r\n                    mod && !mod.inited) {\r\n                    if (config.enforceDefine && (!shExports || !getGlobal(shExports))) {\r\n                        if (hasPathFallback(moduleName)) {\r\n                            return;\r\n                        } else {\r\n                            return onError(makeError('nodefine',\r\n                                             'No define call for ' + moduleName,\r\n                                             null,\r\n                                             [moduleName]));\r\n                        }\r\n                    } else {\r\n                        //A script that does not call define(), so just simulate\r\n                        //the call for it.\r\n                        callGetModule([moduleName, (shim.deps || []), shim.exports]);\r\n                    }\r\n                }\r\n\r\n                checkLoaded();\r\n            },\r\n\r\n            /**\r\n             * Converts a module name + .extension into an URL path.\r\n             * *Requires* the use of a module name. It does not support using\r\n             * plain URLs like nameToUrl.\r\n             */\r\n            toUrl: function (moduleNamePlusExt, relModuleMap) {\r\n                var index = moduleNamePlusExt.lastIndexOf('.'),\r\n                    ext = null;\r\n\r\n                if (index !== -1) {\r\n                    ext = moduleNamePlusExt.substring(index, moduleNamePlusExt.length);\r\n                    moduleNamePlusExt = moduleNamePlusExt.substring(0, index);\r\n                }\r\n\r\n                return context.nameToUrl(normalize(moduleNamePlusExt, relModuleMap && relModuleMap.id, true),\r\n                                         ext);\r\n            },\r\n\r\n            /**\r\n             * Converts a module name to a file path. Supports cases where\r\n             * moduleName may actually be just an URL.\r\n             * Note that it **does not** call normalize on the moduleName,\r\n             * it is assumed to have already been normalized. This is an\r\n             * internal API, not a public one. Use toUrl for the public API.\r\n             */\r\n            nameToUrl: function (moduleName, ext) {\r\n                var paths, pkgs, pkg, pkgPath, syms, i, parentModule, url,\r\n                    parentPath;\r\n\r\n                //If a colon is in the URL, it indicates a protocol is used and it is just\r\n                //an URL to a file, or if it starts with a slash, contains a query arg (i.e. ?)\r\n                //or ends with .js, then assume the user meant to use an url and not a module id.\r\n                //The slash is important for protocol-less URLs as well as full paths.\r\n                if (req.jsExtRegExp.test(moduleName)) {\r\n                    //Just a plain path, not module name lookup, so just return it.\r\n                    //Add extension if it is included. This is a bit wonky, only non-.js things pass\r\n                    //an extension, this method probably needs to be reworked.\r\n                    url = moduleName + (ext || '');\r\n                } else {\r\n                    //A module that needs to be converted to a path.\r\n                    paths = config.paths;\r\n                    pkgs = config.pkgs;\r\n\r\n                    syms = moduleName.split('/');\r\n                    //For each module name segment, see if there is a path\r\n                    //registered for it. Start with most specific name\r\n                    //and work up from it.\r\n                    for (i = syms.length; i > 0; i -= 1) {\r\n                        parentModule = syms.slice(0, i).join('/');\r\n                        pkg = pkgs[parentModule];\r\n                        parentPath = paths[parentModule];\r\n                        if (parentPath) {\r\n                            //If an array, it means there are a few choices,\r\n                            //Choose the one that is desired\r\n                            if (isArray(parentPath)) {\r\n                                parentPath = parentPath[0];\r\n                            }\r\n                            syms.splice(0, i, parentPath);\r\n                            break;\r\n                        } else if (pkg) {\r\n                            //If module name is just the package name, then looking\r\n                            //for the main module.\r\n                            if (moduleName === pkg.name) {\r\n                                pkgPath = pkg.location + '/' + pkg.main;\r\n                            } else {\r\n                                pkgPath = pkg.location;\r\n                            }\r\n                            syms.splice(0, i, pkgPath);\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    //Join the path parts together, then figure out if baseUrl is needed.\r\n                    url = syms.join('/') + (ext || '.js');\r\n                    url = (url.charAt(0) === '/' || url.match(/^[\\w\\+\\.\\-]+:/) ? '' : config.baseUrl) + url;\r\n                }\r\n\r\n                return config.urlArgs ? url +\r\n                                        ((url.indexOf('?') === -1 ? '?' : '&') +\r\n                                         config.urlArgs) : url;\r\n            },\r\n\r\n            //Delegates to req.load. Broken out as a separate function to\r\n            //allow overriding in the optimizer.\r\n            load: function (id, url) {\r\n                req.load(context, id, url);\r\n            },\r\n\r\n            /**\r\n             * Executes a module callack function. Broken out as a separate function\r\n             * solely to allow the build system to sequence the files in the built\r\n             * layer in the right sequence.\r\n             *\r\n             * @private\r\n             */\r\n            execCb: function (name, callback, args, exports) {\r\n                return callback.apply(exports, args);\r\n            },\r\n\r\n            /**\r\n             * callback for script loads, used to check status of loading.\r\n             *\r\n             * @param {Event} evt the event from the browser for the script\r\n             * that was loaded.\r\n             */\r\n            onScriptLoad: function (evt) {\r\n                //Using currentTarget instead of target for Firefox 2.0's sake. Not\r\n                //all old browsers will be supported, but this one was easy enough\r\n                //to support and still makes sense.\r\n                if (evt.type === 'load' ||\r\n                    (readyRegExp.test((evt.currentTarget || evt.srcElement).readyState))) {\r\n                    //Reset interactive script so a script node is not held onto for\r\n                    //to long.\r\n                    interactiveScript = null;\r\n\r\n                    //Pull out the name of the module and the context.\r\n                    var data = getScriptData(evt);\r\n                    context.completeLoad(data.id);\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Callback for script errors.\r\n             */\r\n            onScriptError: function (evt) {\r\n                var data = getScriptData(evt);\r\n                if (!hasPathFallback(data.id)) {\r\n                    return onError(makeError('scripterror', 'Script error', evt, [data.id]));\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Main entry point.\r\n     *\r\n     * If the only argument to require is a string, then the module that\r\n     * is represented by that string is fetched for the appropriate context.\r\n     *\r\n     * If the first argument is an array, then it will be treated as an array\r\n     * of dependency string names to fetch. An optional function callback can\r\n     * be specified to execute when all of those dependencies are available.\r\n     *\r\n     * Make a local req variable to help Caja compliance (it assumes things\r\n     * on a require that are not standardized), and to give a short\r\n     * name for minification/local scope use.\r\n     */\r\n    req = requirejs = function (deps, callback, errback, optional) {\r\n\r\n        //Find the right context, use default\r\n        var contextName = defContextName,\r\n            context, config;\r\n\r\n        // Determine if have config object in the call.\r\n        if (!isArray(deps) && typeof deps !== 'string') {\r\n            // deps is a config object\r\n            config = deps;\r\n            if (isArray(callback)) {\r\n                // Adjust args if there are dependencies\r\n                deps = callback;\r\n                callback = errback;\r\n                errback = optional;\r\n            } else {\r\n                deps = [];\r\n            }\r\n        }\r\n\r\n        if (config && config.context) {\r\n            contextName = config.context;\r\n        }\r\n\r\n        context = contexts[contextName];\r\n        if (!context) {\r\n            context = contexts[contextName] = req.s.newContext(contextName);\r\n        }\r\n\r\n        if (config) {\r\n            context.configure(config);\r\n        }\r\n\r\n        return context.require(deps, callback, errback);\r\n    };\r\n\r\n    /**\r\n     * Support require.config() to make it easier to cooperate with other\r\n     * AMD loaders on globally agreed names.\r\n     */\r\n    req.config = function (config) {\r\n        return req(config);\r\n    };\r\n\r\n    /**\r\n     * Export require as a global, but only if it does not already exist.\r\n     */\r\n    if (!require) {\r\n        require = req;\r\n    }\r\n\r\n    req.version = version;\r\n\r\n    //Used to filter out dependencies that are already paths.\r\n    req.jsExtRegExp = /^\\/|:|\\?|\\.js$/;\r\n    req.isBrowser = isBrowser;\r\n    s = req.s = {\r\n        contexts: contexts,\r\n        newContext: newContext\r\n    };\r\n\r\n    //Create default context.\r\n    req({});\r\n\r\n    //Exports some context-sensitive methods on global require, using\r\n    //default context if no context specified.\r\n    addRequireMethods(req);\r\n\r\n    if (isBrowser) {\r\n        head = s.head = document.getElementsByTagName('head')[0];\r\n        //If BASE tag is in play, using appendChild is a problem for IE6.\r\n        //When that browser dies, this can be removed. Details in this jQuery bug:\r\n        //http://dev.jquery.com/ticket/2709\r\n        baseElement = document.getElementsByTagName('base')[0];\r\n        if (baseElement) {\r\n            head = s.head = baseElement.parentNode;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Any errors that require explicitly generates will be passed to this\r\n     * function. Intercept/override it if you want custom error handling.\r\n     * @param {Error} err the error object.\r\n     */\r\n    req.onError = function (err) {\r\n        throw err;\r\n    };\r\n\r\n    /**\r\n     * Does the request to load a module for the browser case.\r\n     * Make this a separate function to allow other environments\r\n     * to override it.\r\n     *\r\n     * @param {Object} context the require context to find state.\r\n     * @param {String} moduleName the name of the module.\r\n     * @param {Object} url the URL to the module.\r\n     */\r\n    req.load = function (context, moduleName, url) {\r\n        var config = (context && context.config) || {},\r\n            node;\r\n        if (isBrowser) {\r\n            //In the browser so use a script tag\r\n            node = config.xhtml ?\r\n                   document.createElementNS('http://www.w3.org/1999/xhtml', 'html:script') :\r\n                   document.createElement('script');\r\n            node.type = config.scriptType || 'text/javascript';\r\n            node.charset = 'utf-8';\r\n            node.async = true;\r\n\r\n            node.setAttribute('data-requirecontext', context.contextName);\r\n            node.setAttribute('data-requiremodule', moduleName);\r\n\r\n            //Set up load listener. Test attachEvent first because IE9 has\r\n            //a subtle issue in its addEventListener and script onload firings\r\n            //that do not match the behavior of all other browsers with\r\n            //addEventListener support, which fire the onload event for a\r\n            //script right after the script execution. See:\r\n            //https://connect.microsoft.com/IE/feedback/details/648057/script-onload-event-is-not-fired-immediately-after-script-execution\r\n            //UNFORTUNATELY Opera implements attachEvent but does not follow the script\r\n            //script execution mode.\r\n            if (node.attachEvent &&\r\n                //Check if node.attachEvent is artificially added by custom script or\r\n                //natively supported by browser\r\n                //read https://github.com/jrburke/requirejs/issues/187\r\n                //if we can NOT find [native code] then it must NOT natively supported.\r\n                //in IE8, node.attachEvent does not have toString()\r\n                //Note the test for \"[native code\" with no closing brace, see:\r\n                //https://github.com/jrburke/requirejs/issues/273\r\n                !(node.attachEvent.toString && node.attachEvent.toString().indexOf('[native code') < 0) &&\r\n                !isOpera) {\r\n                //Probably IE. IE (at least 6-8) do not fire\r\n                //script onload right after executing the script, so\r\n                //we cannot tie the anonymous define call to a name.\r\n                //However, IE reports the script as being in 'interactive'\r\n                //readyState at the time of the define call.\r\n                useInteractive = true;\r\n\r\n                node.attachEvent('onreadystatechange', context.onScriptLoad);\r\n                //It would be great to add an error handler here to catch\r\n                //404s in IE9+. However, onreadystatechange will fire before\r\n                //the error handler, so that does not help. If addEvenListener\r\n                //is used, then IE will fire error before load, but we cannot\r\n                //use that pathway given the connect.microsoft.com issue\r\n                //mentioned above about not doing the 'script execute,\r\n                //then fire the script load event listener before execute\r\n                //next script' that other browsers do.\r\n                //Best hope: IE10 fixes the issues,\r\n                //and then destroys all installs of IE 6-9.\r\n                //node.attachEvent('onerror', context.onScriptError);\r\n            } else {\r\n                node.addEventListener('load', context.onScriptLoad, false);\r\n                node.addEventListener('error', context.onScriptError, false);\r\n            }\r\n            node.src = url;\r\n\r\n            //For some cache cases in IE 6-8, the script executes before the end\r\n            //of the appendChild execution, so to tie an anonymous define\r\n            //call to the module name (which is stored on the node), hold on\r\n            //to a reference to this node, but clear after the DOM insertion.\r\n            currentlyAddingScript = node;\r\n            if (baseElement) {\r\n                head.insertBefore(node, baseElement);\r\n            } else {\r\n                head.appendChild(node);\r\n            }\r\n            currentlyAddingScript = null;\r\n\r\n            return node;\r\n        } else if (isWebWorker) {\r\n            //In a web worker, use importScripts. This is not a very\r\n            //efficient use of importScripts, importScripts will block until\r\n            //its script is downloaded and evaluated. However, if web workers\r\n            //are in play, the expectation that a build has been done so that\r\n            //only one script needs to be loaded anyway. This may need to be\r\n            //reevaluated if other use cases become common.\r\n            importScripts(url);\r\n\r\n            //Account for anonymous modules\r\n            context.completeLoad(moduleName);\r\n        }\r\n    };\r\n\r\n    function getInteractiveScript() {\r\n        if (interactiveScript && interactiveScript.readyState === 'interactive') {\r\n            return interactiveScript;\r\n        }\r\n\r\n        eachReverse(scripts(), function (script) {\r\n            if (script.readyState === 'interactive') {\r\n                return (interactiveScript = script);\r\n            }\r\n        });\r\n        return interactiveScript;\r\n    }\r\n\r\n    //Look for a data-main script attribute, which could also adjust the baseUrl.\r\n    if (isBrowser) {\r\n        //Figure out baseUrl. Get it from the script tag with require.js in it.\r\n        eachReverse(scripts(), function (script) {\r\n            //Set the 'head' where we can append children by\r\n            //using the script's parent.\r\n            if (!head) {\r\n                head = script.parentNode;\r\n            }\r\n\r\n            //Look for a data-main attribute to set main script for the page\r\n            //to load. If it is there, the path to data main becomes the\r\n            //baseUrl, if it is not already set.\r\n            dataMain = script.getAttribute('data-main');\r\n            if (dataMain) {\r\n                //Set final baseUrl if there is not already an explicit one.\r\n                if (!cfg.baseUrl) {\r\n                    //Pull off the directory of data-main for use as the\r\n                    //baseUrl.\r\n                    src = dataMain.split('/');\r\n                    mainScript = src.pop();\r\n                    subPath = src.length ? src.join('/')  + '/' : './';\r\n\r\n                    cfg.baseUrl = subPath;\r\n                    dataMain = mainScript;\r\n                }\r\n\r\n                //Strip off any trailing .js since dataMain is now\r\n                //like a module name.\r\n                dataMain = dataMain.replace(jsSuffixRegExp, '');\r\n\r\n                //Put the data-main script in the files to load.\r\n                cfg.deps = cfg.deps ? cfg.deps.concat(dataMain) : [dataMain];\r\n\r\n                return true;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * The function that handles definitions of modules. Differs from\r\n     * require() in that a string for the module should be the first argument,\r\n     * and the function to execute after dependencies are loaded should\r\n     * return a value to define the module corresponding to the first argument's\r\n     * name.\r\n     */\r\n    define = function (name, deps, callback) {\r\n        var node, context;\r\n\r\n        //Allow for anonymous functions\r\n        if (typeof name !== 'string') {\r\n            //Adjust args appropriately\r\n            callback = deps;\r\n            deps = name;\r\n            name = null;\r\n        }\r\n\r\n        //This module may not have dependencies\r\n        if (!isArray(deps)) {\r\n            callback = deps;\r\n            deps = [];\r\n        }\r\n\r\n        //If no name, and callback is a function, then figure out if it a\r\n        //CommonJS thing with dependencies.\r\n        if (!deps.length && isFunction(callback)) {\r\n            //Remove comments from the callback string,\r\n            //look for require calls, and pull them into the dependencies,\r\n            //but only if there are function args.\r\n            if (callback.length) {\r\n                callback\r\n                    .toString()\r\n                    .replace(commentRegExp, '')\r\n                    .replace(cjsRequireRegExp, function (match, dep) {\r\n                        deps.push(dep);\r\n                    });\r\n\r\n                //May be a CommonJS thing even without require calls, but still\r\n                //could use exports, and module. Avoid doing exports and module\r\n                //work though if it just needs require.\r\n                //REQUIRES the function to expect the CommonJS variables in the\r\n                //order listed below.\r\n                deps = (callback.length === 1 ? ['require'] : ['require', 'exports', 'module']).concat(deps);\r\n            }\r\n        }\r\n\r\n        //If in IE 6-8 and hit an anonymous define() call, do the interactive\r\n        //work.\r\n        if (useInteractive) {\r\n            node = currentlyAddingScript || getInteractiveScript();\r\n            if (node) {\r\n                if (!name) {\r\n                    name = node.getAttribute('data-requiremodule');\r\n                }\r\n                context = contexts[node.getAttribute('data-requirecontext')];\r\n            }\r\n        }\r\n\r\n        //Always save off evaluating the def call until the script onload handler.\r\n        //This allows multiple modules to be in a file without prematurely\r\n        //tracing dependencies, and allows for anonymous module support,\r\n        //where the module name is not known until the script onload event\r\n        //occurs. If no context, use the global queue, and get it processed\r\n        //in the onscript load callback.\r\n        (context ? context.defQueue : globalDefQueue).push([name, deps, callback]);\r\n    };\r\n\r\n    define.amd = {\r\n        jQuery: true\r\n    };\r\n\r\n\r\n    /**\r\n     * Executes the text. Normally just uses eval, but can be modified\r\n     * to use a better, environment-specific call. Only used for transpiling\r\n     * loader plugins, not for plain JS modules.\r\n     * @param {String} text the text to execute/evaluate.\r\n     */\r\n    req.exec = function (text) {\r\n        /*jslint evil: true */\r\n        return eval(text);\r\n    };\r\n\r\n    //Set up with config info.\r\n    req(cfg);\r\n}(this));"],[1,"\n * @license RequireJS 2.0.6 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.\n * Available via the MIT or new BSD license.\n * see: http://github.com/jrburke/requirejs for details\n */\n//Not using strict: uneven strict support in browsers, #392, and causes\n//problems with requirejs.exec()/transpiler plugins that may not be strict.\n/*jslint regexp: true, nomen: true, sloppy: true */\n/*global window, navigator, document, importScripts, jQuery, setTimeout, opera */\n\nvar requirejs, require, define;\n(function (global) {\n    var req, s, head, baseElement, dataMain, src,\n        interactiveScript, currentlyAddingScript, mainScript, subPath,\n        version = '2.0.6',\n        commentRegExp = /(\\/\\*([\\s\\S]*?)\\*\\/|([^:]|^)\\/\\/(.*)$)/mg,\n        cjsRequireRegExp = /[^.]\\s*require\\s*\\(\\s*[\"']([^'\"\\s]+)[\"']\\s*\\)/g,\n        jsSuffixRegExp = /\\.js$/,\n        currDirRegExp = /^\\.\\//,\n        op = Object.prototype,\n        ostring = op.toString,\n        hasOwn = op.hasOwnProperty,\n        ap = Array.prototype,\n        aps = ap.slice,\n        apsp = ap.splice,\n        isBrowser = !!(typeof window !== 'undefined' && navigator && document),\n        isWebWorker = !isBrowser && typeof importScripts !== 'undefined',\n        //PS3 indicates loaded and complete, but need to wait for complete\n        //specifically. Sequence is 'loading', 'loaded', execution,\n        // then 'complete'. The UA check is unfortunate, but not sure how\n        //to feature test w/o causing perf issues.\n        readyRegExp = isBrowser && navigator.platform === 'PLAYSTATION 3' ?\n                      /^complete$/ : /^(complete|loaded)$/,\n        defContextName = '_',\n        //Oh the tragedy, detecting opera. See the usage of isOpera for reason.\n        isOpera = typeof opera !== 'undefined' && opera.toString() === '[object Opera]',\n        contexts = {},\n        cfg = {},\n        globalDefQueue = [],\n        useInteractive = false;\n\n    function isFunction(it) {\n        return ostring.call(it) === '[object Function]';\n    }\n\n    function isArray(it) {\n        return ostring.call(it) === '[object Array]';\n    }\n\n    /**\n     * Helper function for iterating over an array. If the func returns\n     * a true value, it will break out of the loop.\n     */\n    function each(ary, func) {\n        if (ary) {\n            var i;\n            for (i = 0; i < ary.length; i += 1) {\n                if (ary[i] && func(ary[i], i, ary)) {\n                    break;\n                }\n            }\n        }\n    }\n\n    /**\n     * Helper function for iterating over an array backwards. If the func\n     * returns a true value, it will break out of the loop.\n     */\n    function eachReverse(ary, func) {\n        if (ary) {\n            var i;\n            for (i = ary.length - 1; i > -1; i -= 1) {\n                if (ary[i] && func(ary[i], i, ary)) {\n                    break;\n                }\n            }\n        }\n    }\n\n    function hasProp(obj, prop) {\n        return hasOwn.call(obj, prop);\n    }\n\n    /**\n     * Cycles over properties in an object and calls a function for each\n     * property value. If the function returns a truthy value, then the\n     * iteration is stopped.\n     */\n    function eachProp(obj, func) {\n        var prop;\n        for (prop in obj) {\n            if (obj.hasOwnProperty(prop)) {\n                if (func(obj[prop], prop)) {\n                    break;\n                }\n            }\n        }\n    }\n\n    /**\n     * Simple function to mix in properties from source into target,\n     * but only if target does not already have a property of the same name.\n     * This is not robust in IE for transferring methods that match\n     * Object.prototype names, but the uses of mixin here seem unlikely to\n     * trigger a problem related to that.\n     */\n    function mixin(target, source, force, deepStringMixin) {\n        if (source) {\n            eachProp(source, function (value, prop) {\n                if (force || !hasProp(target, prop)) {\n                    if (deepStringMixin && typeof value !== 'string') {\n                        if (!target[prop]) {\n                            target[prop] = {};\n                        }\n                        mixin(target[prop], value, force, deepStringMixin);\n                    } else {\n                        target[prop] = value;\n                    }\n                }\n            });\n        }\n        return target;\n    }\n\n    //Similar to Function.prototype.bind, but the 'this' object is specified\n    //first, since it is easier to read/figure out what 'this' will be.\n    function bind(obj, fn) {\n        return function () {\n            return fn.apply(obj, arguments);\n        };\n    }\n\n    function scripts() {\n        return document.getElementsByTagName('script');\n    }\n\n    //Allow getting a global that expressed in\n    //dot notation, like 'a.b.c'.\n    function getGlobal(value) {\n        if (!value) {\n            return value;\n        }\n        var g = global;\n        each(value.split('.'), function (part) {\n            g = g[part];\n        });\n        return g;\n    }\n\n    function makeContextModuleFunc(func, relMap, enableBuildCallback) {\n        return function () {\n            //A version of a require function that passes a moduleName\n            //value for items that may need to\n            //look up paths relative to the moduleName\n            var args = aps.call(arguments, 0), lastArg;\n            if (enableBuildCallback &&\n                    isFunction((lastArg = args[args.length - 1]))) {\n                lastArg.__requireJsBuild = true;\n            }\n            args.push(relMap);\n            return func.apply(null, args);\n        };\n    }\n\n    function addRequireMethods(req, context, relMap) {\n        each([\n            ['toUrl'],\n            ['undef'],\n            ['defined', 'requireDefined'],\n            ['specified', 'requireSpecified']\n        ], function (item) {\n            var prop = item[1] || item[0];\n            req[item[0]] = context ? makeContextModuleFunc(context[prop], relMap) :\n                    //If no context, then use default context. Reference from\n                    //contexts instead of early binding to default context, so\n                    //that during builds, the latest instance of the default\n                    //context with its config gets used.\n                    function () {\n                        var ctx = contexts[defContextName];\n                        return ctx[prop].apply(ctx, arguments);\n                    };\n        });\n    }\n\n    /**\n     * Constructs an error with a pointer to an URL with more information.\n     * @param {String} id the error ID that maps to an ID on a web page.\n     * @param {String} message human readable error.\n     * @param {Error} [err] the original error, if there is one.\n     *\n     * @returns {Error}\n     */\n    function makeError(id, msg, err, requireModules) {\n        var e = new Error(msg + '\\nhttp://requirejs.org/docs/errors.html#' + id);\n        e.requireType = id;\n        e.requireModules = requireModules;\n        if (err) {\n            e.originalError = err;\n        }\n        return e;\n    }\n\n    if (typeof define !== 'undefined') {\n        //If a define is already in play via another AMD loader,\n        //do not overwrite.\n        return;\n    }\n\n    if (typeof requirejs !== 'undefined') {\n        if (isFunction(requirejs)) {\n            //Do not overwrite and existing requirejs instance.\n            return;\n        }\n        cfg = requirejs;\n        requirejs = undefined;\n    }\n\n    //Allow for a require config object\n    if (typeof require !== 'undefined' && !isFunction(require)) {\n        //assume it is a config object.\n        cfg = require;\n        require = undefined;\n    }\n\n    function newContext(contextName) {\n        var inCheckLoaded, Module, context, handlers,\n            checkLoadedTimeoutId,\n            config = {\n                waitSeconds: 7,\n                baseUrl: './',\n                paths: {},\n                pkgs: {},\n                shim: {}\n            },\n            registry = {},\n            undefEvents = {},\n            defQueue = [],\n            defined = {},\n            urlFetched = {},\n            requireCounter = 1,\n            unnormalizedCounter = 1,\n            //Used to track the order in which modules\n            //should be executed, by the order they\n            //load. Important for consistent cycle resolution\n            //behavior.\n            waitAry = [];\n\n        /**\n         * Trims the . and .. from an array of path segments.\n         * It will keep a leading path segment if a .. will become\n         * the first path segment, to help with module name lookups,\n         * which act like paths, but can be remapped. But the end result,\n         * all paths that use this function should look normalized.\n         * NOTE: this method MODIFIES the input array.\n         * @param {Array} ary the array of path segments.\n         */\n        function trimDots(ary) {\n            var i, part;\n            for (i = 0; ary[i]; i += 1) {\n                part = ary[i];\n                if (part === '.') {\n                    ary.splice(i, 1);\n                    i -= 1;\n                } else if (part === '..') {\n                    if (i === 1 && (ary[2] === '..' || ary[0] === '..')) {\n                        //End of the line. Keep at least one non-dot\n                        //path segment at the front so it can be mapped\n                        //correctly to disk. Otherwise, there is likely\n                        //no path mapping for a path starting with '..'.\n                        //This can still fail, but catches the most reasonable\n                        //uses of ..\n                        break;\n                    } else if (i > 0) {\n                        ary.splice(i - 1, 2);\n                        i -= 2;\n                    }\n                }\n            }\n        }\n\n        /**\n         * Given a relative module name, like ./something, normalize it to\n         * a real name that can be mapped to a path.\n         * @param {String} name the relative name\n         * @param {String} baseName a real name that the name arg is relative\n         * to.\n         * @param {Boolean} applyMap apply the map config to the value. Should\n         * only be done if this normalization is for a dependency ID.\n         * @returns {String} normalized name\n         */\n        function normalize(name, baseName, applyMap) {\n            var pkgName, pkgConfig, mapValue, nameParts, i, j, nameSegment,\n                foundMap, foundI, foundStarMap, starI,\n                baseParts = baseName && baseName.split('/'),\n                normalizedBaseParts = baseParts,\n                map = config.map,\n                starMap = map && map['*'];\n\n            //Adjust any relative paths.\n            if (name && name.charAt(0) === '.') {\n                //If have a base name, try to normalize against it,\n                //otherwise, assume it is a top-level require that will\n                //be relative to baseUrl in the end.\n                if (baseName) {\n                    if (config.pkgs[baseName]) {\n                        //If the baseName is a package name, then just treat it as one\n                        //name to concat the name with.\n                        normalizedBaseParts = baseParts = [baseName];\n                    } else {\n                        //Convert baseName to array, and lop off the last part,\n                        //so that . matches that 'directory' and not name of the baseName's\n                        //module. For instance, baseName of 'one/two/three', maps to\n                        //'one/two/three.js', but we want the directory, 'one/two' for\n                        //this normalization.\n                        normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);\n                    }\n\n                    name = normalizedBaseParts.concat(name.split('/'));\n                    trimDots(name);\n\n                    //Some use of packages may use a . path to reference the\n                    //'main' module name, so normalize for that.\n                    pkgConfig = config.pkgs[(pkgName = name[0])];\n                    name = name.join('/');\n                    if (pkgConfig && name === pkgName + '/' + pkgConfig.main) {\n                        name = pkgName;\n                    }\n                } else if (name.indexOf('./') === 0) {\n                    // No baseName, so this is ID is resolved relative\n                    // to baseUrl, pull off the leading dot.\n                    name = name.substring(2);\n                }\n            }\n\n            //Apply map config if available.\n            if (applyMap && (baseParts || starMap) && map) {\n                nameParts = name.split('/');\n\n                for (i = nameParts.length; i > 0; i -= 1) {\n                    nameSegment = nameParts.slice(0, i).join('/');\n\n                    if (baseParts) {\n                        //Find the longest baseName segment match in the config.\n                        //So, do joins on the biggest to smallest lengths of baseParts.\n                        for (j = baseParts.length; j > 0; j -= 1) {\n                            mapValue = map[baseParts.slice(0, j).join('/')];\n\n                            //baseName segment has config, find if it has one for\n                            //this name.\n                            if (mapValue) {\n                                mapValue = mapValue[nameSegment];\n                                if (mapValue) {\n                                    //Match, update name to the new value.\n                                    foundMap = mapValue;\n                                    foundI = i;\n                                    break;\n                                }\n                            }\n                        }\n                    }\n\n                    if (foundMap) {\n                        break;\n                    }\n\n                    //Check for a star map match, but just hold on to it,\n                    //if there is a shorter segment match later in a matching\n                    //config, then favor over this star map.\n                    if (!foundStarMap && starMap && starMap[nameSegment]) {\n                        foundStarMap = starMap[nameSegment];\n                        starI = i;\n                    }\n                }\n\n                if (!foundMap && foundStarMap) {\n                    foundMap = foundStarMap;\n                    foundI = starI;\n                }\n\n                if (foundMap) {\n                    nameParts.splice(0, foundI, foundMap);\n                    name = nameParts.join('/');\n                }\n            }\n\n            return name;\n        }\n\n        function removeScript(name) {\n            if (isBrowser) {\n                each(scripts(), function (scriptNode) {\n                    if (scriptNode.getAttribute('data-requiremodule') === name &&\n                            scriptNode.getAttribute('data-requirecontext') === context.contextName) {\n                        scriptNode.parentNode.removeChild(scriptNode);\n                        return true;\n                    }\n                });\n            }\n        }\n\n        function hasPathFallback(id) {\n            var pathConfig = config.paths[id];\n            if (pathConfig && isArray(pathConfig) && pathConfig.length > 1) {\n                removeScript(id);\n                //Pop off the first array value, since it failed, and\n                //retry\n                pathConfig.shift();\n                context.undef(id);\n                context.require([id]);\n                return true;\n            }\n        }\n\n        /**\n         * Creates a module mapping that includes plugin prefix, module\n         * name, and path. If parentModuleMap is provided it will\n         * also normalize the name via require.normalize()\n         *\n         * @param {String} name the module name\n         * @param {String} [parentModuleMap] parent module map\n         * for the module name, used to resolve relative names.\n         * @param {Boolean} isNormalized: is the ID already normalized.\n         * This is true if this call is done for a define() module ID.\n         * @param {Boolean} applyMap: apply the map config to the ID.\n         * Should only be true if this map is for a dependency.\n         *\n         * @returns {Object}\n         */\n        function makeModuleMap(name, parentModuleMap, isNormalized, applyMap) {\n            var url, pluginModule, suffix,\n                index = name ? name.indexOf('!') : -1,\n                prefix = null,\n                parentName = parentModuleMap ? parentModuleMap.name : null,\n                originalName = name,\n                isDefine = true,\n                normalizedName = '';\n\n            //If no name, then it means it is a require call, generate an\n            //internal name.\n            if (!name) {\n                isDefine = false;\n                name = '_@r' + (requireCounter += 1);\n            }\n\n            if (index !== -1) {\n                prefix = name.substring(0, index);\n                name = name.substring(index + 1, name.length);\n            }\n\n            if (prefix) {\n                prefix = normalize(prefix, parentName, applyMap);\n                pluginModule = defined[prefix];\n            }\n\n            //Account for relative paths if there is a base name.\n            if (name) {\n                if (prefix) {\n                    if (pluginModule && pluginModule.normalize) {\n                        //Plugin is loaded, use its normalize method.\n                        normalizedName = pluginModule.normalize(name, function (name) {\n                            return normalize(name, parentName, applyMap);\n                        });\n                    } else {\n                        normalizedName = normalize(name, parentName, applyMap);\n                    }\n                } else {\n                    //A regular module.\n                    normalizedName = normalize(name, parentName, applyMap);\n                    url = context.nameToUrl(normalizedName);\n                }\n            }\n\n            //If the id is a plugin id that cannot be determined if it needs\n            //normalization, stamp it with a unique ID so two matching relative\n            //ids that may conflict can be separate.\n            suffix = prefix && !pluginModule && !isNormalized ?\n                     '_unnormalized' + (unnormalizedCounter += 1) :\n                     '';\n\n            return {\n                prefix: prefix,\n                name: normalizedName,\n                parentMap: parentModuleMap,\n                unnormalized: !!suffix,\n                url: url,\n                originalName: originalName,\n                isDefine: isDefine,\n                id: (prefix ?\n                        prefix + '!' + normalizedName :\n                        normalizedName) + suffix\n            };\n        }\n\n        function getModule(depMap) {\n            var id = depMap.id,\n                mod = registry[id];\n\n            if (!mod) {\n                mod = registry[id] = new context.Module(depMap);\n            }\n\n            return mod;\n        }\n\n        function on(depMap, name, fn) {\n            var id = depMap.id,\n                mod = registry[id];\n\n            if (hasProp(defined, id) &&\n                    (!mod || mod.defineEmitComplete)) {\n                if (name === 'defined') {\n                    fn(defined[id]);\n                }\n            } else {\n                getModule(depMap).on(name, fn);\n            }\n        }\n\n        function onError(err, errback) {\n            var ids = err.requireModules,\n                notified = false;\n\n            if (errback) {\n                errback(err);\n            } else {\n                each(ids, function (id) {\n                    var mod = registry[id];\n                    if (mod) {\n                        //Set error on module, so it skips timeout checks.\n                        mod.error = err;\n                        if (mod.events.error) {\n                            notified = true;\n                            mod.emit('error', err);\n                        }\n                    }\n                });\n\n                if (!notified) {\n                    req.onError(err);\n                }\n            }\n        }\n\n        /**\n         * Internal method to transfer globalQueue items to this context's\n         * defQueue.\n         */\n        function takeGlobalQueue() {\n            //Push all the globalDefQueue items into the context's defQueue\n            if (globalDefQueue.length) {\n                //Array splice in the values since the context code has a\n                //local var ref to defQueue, so cannot just reassign the one\n                //on context.\n                apsp.apply(defQueue,\n                           [defQueue.length - 1, 0].concat(globalDefQueue));\n                globalDefQueue = [];\n            }\n        }\n\n        /**\n         * Helper function that creates a require function object to give to\n         * modules that ask for it as a dependency. It needs to be specific\n         * per module because of the implication of path mappings that may\n         * need to be relative to the module name.\n         */\n        function makeRequire(mod, enableBuildCallback, altRequire) {\n            var relMap = mod && mod.map,\n                modRequire = makeContextModuleFunc(altRequire || context.require,\n                                                   relMap,\n                                                   enableBuildCallback);\n\n            addRequireMethods(modRequire, context, relMap);\n            modRequire.isBrowser = isBrowser;\n\n            return modRequire;\n        }\n\n        handlers = {\n            'require': function (mod) {\n                return makeRequire(mod);\n            },\n            'exports': function (mod) {\n                mod.usingExports = true;\n                if (mod.map.isDefine) {\n                    return (mod.exports = defined[mod.map.id] = {});\n                }\n            },\n            'module': function (mod) {\n                return (mod.module = {\n                    id: mod.map.id,\n                    uri: mod.map.url,\n                    config: function () {\n                        return (config.config && config.config[mod.map.id]) || {};\n                    },\n                    exports: defined[mod.map.id]\n                });\n            }\n        };\n\n        function removeWaiting(id) {\n            //Clean up machinery used for waiting modules.\n            delete registry[id];\n\n            each(waitAry, function (mod, i) {\n                if (mod.map.id === id) {\n                    waitAry.splice(i, 1);\n                    if (!mod.defined) {\n                        context.waitCount -= 1;\n                    }\n                    return true;\n                }\n            });\n        }\n\n        function findCycle(mod, traced, processed) {\n            var id = mod.map.id,\n                depArray = mod.depMaps,\n                foundModule;\n\n            //Do not bother with unitialized modules or not yet enabled\n            //modules.\n            if (!mod.inited) {\n                return;\n            }\n\n            //Found the cycle.\n            if (traced[id]) {\n                return mod;\n            }\n\n            traced[id] = true;\n\n            //Trace through the dependencies.\n            each(depArray, function (depMap) {\n                var depId = depMap.id,\n                    depMod = registry[depId];\n\n                if (!depMod || processed[depId] ||\n                        !depMod.inited || !depMod.enabled) {\n                    return;\n                }\n\n                return (foundModule = findCycle(depMod, traced, processed));\n            });\n\n            processed[id] = true;\n\n            return foundModule;\n        }\n\n        function forceExec(mod, traced, uninited) {\n            var id = mod.map.id,\n                depArray = mod.depMaps;\n\n            if (!mod.inited || !mod.map.isDefine) {\n                return;\n            }\n\n            if (traced[id]) {\n                return defined[id];\n            }\n\n            traced[id] = mod;\n\n            each(depArray, function (depMap) {\n                var depId = depMap.id,\n                    depMod = registry[depId],\n                    value;\n\n                if (handlers[depId]) {\n                    return;\n                }\n\n                if (depMod) {\n                    if (!depMod.inited || !depMod.enabled) {\n                        //Dependency is not inited,\n                        //so this module cannot be\n                        //given a forced value yet.\n                        uninited[id] = true;\n                        return;\n                    }\n\n                    //Get the value for the current dependency\n                    value = forceExec(depMod, traced, uninited);\n\n                    //Even with forcing it may not be done,\n                    //in particular if the module is waiting\n                    //on a plugin resource.\n                    if (!uninited[depId]) {\n                        mod.defineDepById(depId, value);\n                    }\n                }\n            });\n\n            mod.check(true);\n\n            return defined[id];\n        }\n\n        function modCheck(mod) {\n            mod.check();\n        }\n\n        function checkLoaded() {\n            var map, modId, err, usingPathFallback,\n                waitInterval = config.waitSeconds * 1000,\n                //It is possible to disable the wait interval by using waitSeconds of 0.\n                expired = waitInterval && (context.startTime + waitInterval) < new Date().getTime(),\n                noLoads = [],\n                stillLoading = false,\n                needCycleCheck = true;\n\n            //Do not bother if this call was a result of a cycle break.\n            if (inCheckLoaded) {\n                return;\n            }\n\n            inCheckLoaded = true;\n\n            //Figure out the state of all the modules.\n            eachProp(registry, function (mod) {\n                map = mod.map;\n                modId = map.id;\n\n                //Skip things that are not enabled or in error state.\n                if (!mod.enabled) {\n                    return;\n                }\n\n                if (!mod.error) {\n                    //If the module should be executed, and it has not\n                    //been inited and time is up, remember it.\n                    if (!mod.inited && expired) {\n                        if (hasPathFallback(modId)) {\n                            usingPathFallback = true;\n                            stillLoading = true;\n                        } else {\n                            noLoads.push(modId);\n                            removeScript(modId);\n                        }\n                    } else if (!mod.inited && mod.fetched && map.isDefine) {\n                        stillLoading = true;\n                        if (!map.prefix) {\n                            //No reason to keep looking for unfinished\n                            //loading. If the only stillLoading is a\n                            //plugin resource though, keep going,\n                            //because it may be that a plugin resource\n                            //is waiting on a non-plugin cycle.\n                            return (needCycleCheck = false);\n                        }\n                    }\n                }\n            });\n\n            if (expired && noLoads.length) {\n                //If wait time expired, throw error of unloaded modules.\n                err = makeError('timeout', 'Load timeout for modules: ' + noLoads, null, noLoads);\n                err.contextName = context.contextName;\n                return onError(err);\n            }\n\n            //Not expired, check for a cycle.\n            if (needCycleCheck) {\n\n                each(waitAry, function (mod) {\n                    if (mod.defined) {\n                        return;\n                    }\n\n                    var cycleMod = findCycle(mod, {}, {}),\n                        traced = {};\n\n                    if (cycleMod) {\n                        forceExec(cycleMod, traced, {});\n\n                        //traced modules may have been\n                        //removed from the registry, but\n                        //their listeners still need to\n                        //be called.\n                        eachProp(traced, modCheck);\n                    }\n                });\n\n                //Now that dependencies have\n                //been satisfied, trigger the\n                //completion check that then\n                //notifies listeners.\n                eachProp(registry, modCheck);\n            }\n\n            //If still waiting on loads, and the waiting load is something\n            //other than a plugin resource, or there are still outstanding\n            //scripts, then just try back later.\n            if ((!expired || usingPathFallback) && stillLoading) {\n                //Something is still waiting to load. Wait for it, but only\n                //if a timeout is not already in effect.\n                if ((isBrowser || isWebWorker) && !checkLoadedTimeoutId) {\n                    checkLoadedTimeoutId = setTimeout(function () {\n                        checkLoadedTimeoutId = 0;\n                        checkLoaded();\n                    }, 50);\n                }\n            }\n\n            inCheckLoaded = false;\n        }\n\n        Module = function (map) {\n            this.events = undefEvents[map.id] || {};\n            this.map = map;\n            this.shim = config.shim[map.id];\n            this.depExports = [];\n            this.depMaps = [];\n            this.depMatched = [];\n            this.pluginMaps = {};\n            this.depCount = 0;\n\n            /* this.exports this.factory\n               this.depMaps = [],\n               this.enabled, this.fetched\n            */\n        };\n\n        Module.prototype = {\n            init: function (depMaps, factory, errback, options) {\n                options = options || {};\n\n                //Do not do more inits if already done. Can happen if there\n                //are multiple define calls for the same module. That is not\n                //a normal, common case, but it is also not unexpected.\n                if (this.inited) {\n                    return;\n                }\n\n                this.factory = factory;\n\n                if (errback) {\n                    //Register for errors on this module.\n                    this.on('error', errback);\n                } else if (this.events.error) {\n                    //If no errback already, but there are error listeners\n                    //on this module, set up an errback to pass to the deps.\n                    errback = bind(this, function (err) {\n                        this.emit('error', err);\n                    });\n                }\n\n                //Do a copy of the dependency array, so that\n                //source inputs are not modified. For example\n                //\"shim\" deps are passed in here directly, and\n                //doing a direct modification of the depMaps array\n                //would affect that config.\n                this.depMaps = depMaps && depMaps.slice(0);\n                this.depMaps.rjsSkipMap = depMaps.rjsSkipMap;\n\n                this.errback = errback;\n\n                //Indicate this module has be initialized\n                this.inited = true;\n\n                this.ignore = options.ignore;\n\n                //Could have option to init this module in enabled mode,\n                //or could have been previously marked as enabled. However,\n                //the dependencies are not known until init is called. So\n                //if enabled previously, now trigger dependencies as enabled.\n                if (options.enabled || this.enabled) {\n                    //Enable this module and dependencies.\n                    //Will call this.check()\n                    this.enable();\n                } else {\n                    this.check();\n                }\n            },\n\n            defineDepById: function (id, depExports) {\n                var i;\n\n                //Find the index for this dependency.\n                each(this.depMaps, function (map, index) {\n                    if (map.id === id) {\n                        i = index;\n                        return true;\n                    }\n                });\n\n                return this.defineDep(i, depExports);\n            },\n\n            defineDep: function (i, depExports) {\n                //Because of cycles, defined callback for a given\n                //export can be called more than once.\n                if (!this.depMatched[i]) {\n                    this.depMatched[i] = true;\n                    this.depCount -= 1;\n                    this.depExports[i] = depExports;\n                }\n            },\n\n            fetch: function () {\n                if (this.fetched) {\n                    return;\n                }\n                this.fetched = true;\n\n                context.startTime = (new Date()).getTime();\n\n                var map = this.map;\n\n                //If the manager is for a plugin managed resource,\n                //ask the plugin to load it now.\n                if (this.shim) {\n                    makeRequire(this, true)(this.shim.deps || [], bind(this, function () {\n                        return map.prefix ? this.callPlugin() : this.load();\n                    }));\n                } else {\n                    //Regular dependency.\n                    return map.prefix ? this.callPlugin() : this.load();\n                }\n            },\n\n            load: function () {\n                var url = this.map.url;\n\n                //Regular dependency.\n                if (!urlFetched[url]) {\n                    urlFetched[url] = true;\n                    context.load(this.map.id, url);\n                }\n            },\n\n            /**\n             * Checks is the module is ready to define itself, and if so,\n             * define it. If the silent argument is true, then it will just\n             * define, but not notify listeners, and not ask for a context-wide\n             * check of all loaded modules. That is useful for cycle breaking.\n             */\n            check: function (silent) {\n                if (!this.enabled || this.enabling) {\n                    return;\n                }\n\n                var err, cjsModule,\n                    id = this.map.id,\n                    depExports = this.depExports,\n                    exports = this.exports,\n                    factory = this.factory;\n\n                if (!this.inited) {\n                    this.fetch();\n                } else if (this.error) {\n                    this.emit('error', this.error);\n                } else if (!this.defining) {\n                    //The factory could trigger another require call\n                    //that would result in checking this module to\n                    //define itself again. If already in the process\n                    //of doing that, skip this work.\n                    this.defining = true;\n\n                    if (this.depCount < 1 && !this.defined) {\n                        if (isFunction(factory)) {\n                            //If there is an error listener, favor passing\n                            //to that instead of throwing an error.\n                            if (this.events.error) {\n                                try {\n                                    exports = context.execCb(id, factory, depExports, exports);\n                                } catch (e) {\n                                    err = e;\n                                }\n                            } else {\n                                exports = context.execCb(id, factory, depExports, exports);\n                            }\n\n                            if (this.map.isDefine) {\n                                //If setting exports via 'module' is in play,\n                                //favor that over return value and exports. After that,\n                                //favor a non-undefined return value over exports use.\n                                cjsModule = this.module;\n                                if (cjsModule &&\n                                        cjsModule.exports !== undefined &&\n                                        //Make sure it is not already the exports value\n                                        cjsModule.exports !== this.exports) {\n                                    exports = cjsModule.exports;\n                                } else if (exports === undefined && this.usingExports) {\n                                    //exports already set the defined value.\n                                    exports = this.exports;\n                                }\n                            }\n\n                            if (err) {\n                                err.requireMap = this.map;\n                                err.requireModules = [this.map.id];\n                                err.requireType = 'define';\n                                return onError((this.error = err));\n                            }\n\n                        } else {\n                            //Just a literal value\n                            exports = factory;\n                        }\n\n                        this.exports = exports;\n\n                        if (this.map.isDefine && !this.ignore) {\n                            defined[id] = exports;\n\n                            if (req.onResourceLoad) {\n                                req.onResourceLoad(context, this.map, this.depMaps);\n                            }\n                        }\n\n                        //Clean up\n                        delete registry[id];\n\n                        this.defined = true;\n                        context.waitCount -= 1;\n                        if (context.waitCount === 0) {\n                            //Clear the wait array used for cycles.\n                            waitAry = [];\n                        }\n                    }\n\n                    //Finished the define stage. Allow calling check again\n                    //to allow define notifications below in the case of a\n                    //cycle.\n                    this.defining = false;\n\n                    if (!silent) {\n                        if (this.defined && !this.defineEmitted) {\n                            this.defineEmitted = true;\n                            this.emit('defined', this.exports);\n                            this.defineEmitComplete = true;\n                        }\n                    }\n                }\n            },\n\n            callPlugin: function () {\n                var map = this.map,\n                    id = map.id,\n                    pluginMap = makeModuleMap(map.prefix, null, false, true);\n\n                on(pluginMap, 'defined', bind(this, function (plugin) {\n                    var load, normalizedMap, normalizedMod,\n                        name = this.map.name,\n                        parentName = this.map.parentMap ? this.map.parentMap.name : null;\n\n                    //If current map is not normalized, wait for that\n                    //normalized name to load instead of continuing.\n                    if (this.map.unnormalized) {\n                        //Normalize the ID if the plugin allows it.\n                        if (plugin.normalize) {\n                            name = plugin.normalize(name, function (name) {\n                                return normalize(name, parentName, true);\n                            }) || '';\n                        }\n\n                        normalizedMap = makeModuleMap(map.prefix + '!' + name,\n                                                      this.map.parentMap,\n                                                      false,\n                                                      true);\n                        on(normalizedMap,\n                            'defined', bind(this, function (value) {\n                                this.init([], function () { return value; }, null, {\n                                    enabled: true,\n                                    ignore: true\n                                });\n                            }));\n                        normalizedMod = registry[normalizedMap.id];\n                        if (normalizedMod) {\n                            if (this.events.error) {\n                                normalizedMod.on('error', bind(this, function (err) {\n                                    this.emit('error', err);\n                                }));\n                            }\n                            normalizedMod.enable();\n                        }\n\n                        return;\n                    }\n\n                    load = bind(this, function (value) {\n                        this.init([], function () { return value; }, null, {\n                            enabled: true\n                        });\n                    });\n\n                    load.error = bind(this, function (err) {\n                        this.inited = true;\n                        this.error = err;\n                        err.requireModules = [id];\n\n                        //Remove temp unnormalized modules for this module,\n                        //since they will never be resolved otherwise now.\n                        eachProp(registry, function (mod) {\n                            if (mod.map.id.indexOf(id + '_unnormalized') === 0) {\n                                removeWaiting(mod.map.id);\n                            }\n                        });\n\n                        onError(err);\n                    });\n\n                    //Allow plugins to load other code without having to know the\n                    //context or how to 'complete' the load.\n                    load.fromText = function (moduleName, text) {\n                        /*jslint evil: true */\n                        var hasInteractive = useInteractive;\n\n                        //Turn off interactive script matching for IE for any define\n                        //calls in the text, then turn it back on at the end.\n                        if (hasInteractive) {\n                            useInteractive = false;\n                        }\n\n                        //Prime the system by creating a module instance for\n                        //it.\n                        getModule(makeModuleMap(moduleName));\n\n                        req.exec(text);\n\n                        if (hasInteractive) {\n                            useInteractive = true;\n                        }\n\n                        //Support anonymous modules.\n                        context.completeLoad(moduleName);\n                    };\n\n                    //Use parentName here since the plugin's name is not reliable,\n                    //could be some weird string with no path that actually wants to\n                    //reference the parentName's path.\n                    plugin.load(map.name, makeRequire(map.parentMap, true, function (deps, cb, er) {\n                        deps.rjsSkipMap = true;\n                        return context.require(deps, cb, er);\n                    }), load, config);\n                }));\n\n                context.enable(pluginMap, this);\n                this.pluginMaps[pluginMap.id] = pluginMap;\n            },\n\n            enable: function () {\n                this.enabled = true;\n\n                if (!this.waitPushed) {\n                    waitAry.push(this);\n                    context.waitCount += 1;\n                    this.waitPushed = true;\n                }\n\n                //Set flag mentioning that the module is enabling,\n                //so that immediate calls to the defined callbacks\n                //for dependencies do not trigger inadvertent load\n                //with the depCount still being zero.\n                this.enabling = true;\n\n                //Enable each dependency\n                each(this.depMaps, bind(this, function (depMap, i) {\n                    var id, mod, handler;\n\n                    if (typeof depMap === 'string') {\n                        //Dependency needs to be converted to a depMap\n                        //and wired up to this module.\n                        depMap = makeModuleMap(depMap,\n                                               (this.map.isDefine ? this.map : this.map.parentMap),\n                                               false,\n                                               !this.depMaps.rjsSkipMap);\n                        this.depMaps[i] = depMap;\n\n                        handler = handlers[depMap.id];\n\n                        if (handler) {\n                            this.depExports[i] = handler(this);\n                            return;\n                        }\n\n                        this.depCount += 1;\n\n                        on(depMap, 'defined', bind(this, function (depExports) {\n                            this.defineDep(i, depExports);\n                            this.check();\n                        }));\n\n                        if (this.errback) {\n                            on(depMap, 'error', this.errback);\n                        }\n                    }\n\n                    id = depMap.id;\n                    mod = registry[id];\n\n                    //Skip special modules like 'require', 'exports', 'module'\n                    //Also, don't call enable if it is already enabled,\n                    //important in circular dependency cases.\n                    if (!handlers[id] && mod && !mod.enabled) {\n                        context.enable(depMap, this);\n                    }\n                }));\n\n                //Enable each plugin that is used in\n                //a dependency\n                eachProp(this.pluginMaps, bind(this, function (pluginMap) {\n                    var mod = registry[pluginMap.id];\n                    if (mod && !mod.enabled) {\n                        context.enable(pluginMap, this);\n                    }\n                }));\n\n                this.enabling = false;\n\n                this.check();\n            },\n\n            on: function (name, cb) {\n                var cbs = this.events[name];\n                if (!cbs) {\n                    cbs = this.events[name] = [];\n                }\n                cbs.push(cb);\n            },\n\n            emit: function (name, evt) {\n                each(this.events[name], function (cb) {\n                    cb(evt);\n                });\n                if (name === 'error') {\n                    //Now that the error handler was triggered, remove\n                    //the listeners, since this broken Module instance\n                    //can stay around for a while in the registry/waitAry.\n                    delete this.events[name];\n                }\n            }\n        };\n\n        function callGetModule(args) {\n            getModule(makeModuleMap(args[0], null, true)).init(args[1], args[2]);\n        }\n\n        function removeListener(node, func, name, ieName) {\n            //Favor detachEvent because of IE9\n            //issue, see attachEvent/addEventListener comment elsewhere\n            //in this file.\n            if (node.detachEvent && !isOpera) {\n                //Probably IE. If not it will throw an error, which will be\n                //useful to know.\n                if (ieName) {\n                    node.detachEvent(ieName, func);\n                }\n            } else {\n                node.removeEventListener(name, func, false);\n            }\n        }\n\n        /**\n         * Given an event from a script node, get the requirejs info from it,\n         * and then removes the event listeners on the node.\n         * @param {Event} evt\n         * @returns {Object}\n         */\n        function getScriptData(evt) {\n            //Using currentTarget instead of target for Firefox 2.0's sake. Not\n            //all old browsers will be supported, but this one was easy enough\n            //to support and still makes sense.\n            var node = evt.currentTarget || evt.srcElement;\n\n            //Remove the listeners once here.\n            removeListener(node, context.onScriptLoad, 'load', 'onreadystatechange');\n            removeListener(node, context.onScriptError, 'error');\n\n            return {\n                node: node,\n                id: node && node.getAttribute('data-requiremodule')\n            };\n        }\n\n        return (context = {\n            config: config,\n            contextName: contextName,\n            registry: registry,\n            defined: defined,\n            urlFetched: urlFetched,\n            waitCount: 0,\n            defQueue: defQueue,\n            Module: Module,\n            makeModuleMap: makeModuleMap,\n\n            /**\n             * Set a configuration for the context.\n             * @param {Object} cfg config object to integrate.\n             */\n            configure: function (cfg) {\n                //Make sure the baseUrl ends in a slash.\n                if (cfg.baseUrl) {\n                    if (cfg.baseUrl.charAt(cfg.baseUrl.length - 1) !== '/') {\n                        cfg.baseUrl += '/';\n                    }\n                }\n\n                //Save off the paths and packages since they require special processing,\n                //they are additive.\n                var pkgs = config.pkgs,\n                    shim = config.shim,\n                    paths = config.paths,\n                    map = config.map;\n\n                //Mix in the config values, favoring the new values over\n                //existing ones in context.config.\n                mixin(config, cfg, true);\n\n                //Merge paths.\n                config.paths = mixin(paths, cfg.paths, true);\n\n                //Merge map\n                if (cfg.map) {\n                    config.map = mixin(map || {}, cfg.map, true, true);\n                }\n\n                //Merge shim\n                if (cfg.shim) {\n                    eachProp(cfg.shim, function (value, id) {\n                        //Normalize the structure\n                        if (isArray(value)) {\n                            value = {\n                                deps: value\n                            };\n                        }\n                        if (value.exports && !value.exports.__buildReady) {\n                            value.exports = context.makeShimExports(value.exports);\n                        }\n                        shim[id] = value;\n                    });\n                    config.shim = shim;\n                }\n\n                //Adjust packages if necessary.\n                if (cfg.packages) {\n                    each(cfg.packages, function (pkgObj) {\n                        var location;\n\n                        pkgObj = typeof pkgObj === 'string' ? { name: pkgObj } : pkgObj;\n                        location = pkgObj.location;\n\n                        //Create a brand new object on pkgs, since currentPackages can\n                        //be passed in again, and config.pkgs is the internal transformed\n                        //state for all package configs.\n                        pkgs[pkgObj.name] = {\n                            name: pkgObj.name,\n                            location: location || pkgObj.name,\n                            //Remove leading dot in main, so main paths are normalized,\n                            //and remove any trailing .js, since different package\n                            //envs have different conventions: some use a module name,\n                            //some use a file name.\n                            main: (pkgObj.main || 'main')\n                                  .replace(currDirRegExp, '')\n                                  .replace(jsSuffixRegExp, '')\n                        };\n                    });\n\n                    //Done with modifications, assing packages back to context config\n                    config.pkgs = pkgs;\n                }\n\n                //If there are any \"waiting to execute\" modules in the registry,\n                //update the maps for them, since their info, like URLs to load,\n                //may have changed.\n                eachProp(registry, function (mod, id) {\n                    //If module already has init called, since it is too\n                    //late to modify them, and ignore unnormalized ones\n                    //since they are transient.\n                    if (!mod.inited && !mod.map.unnormalized) {\n                        mod.map = makeModuleMap(id);\n                    }\n                });\n\n                //If a deps array or a config callback is specified, then call\n                //require with those args. This is useful when require is defined as a\n                //config object before require.js is loaded.\n                if (cfg.deps || cfg.callback) {\n                    context.require(cfg.deps || [], cfg.callback);\n                }\n            },\n\n            makeShimExports: function (exports) {\n                var func;\n                if (typeof exports === 'string') {\n                    func = function () {\n                        return getGlobal(exports);\n                    };\n                    //Save the exports for use in nodefine checking.\n                    func.exports = exports;\n                    return func;\n                } else {\n                    return function () {\n                        return exports.apply(global, arguments);\n                    };\n                }\n            },\n\n            requireDefined: function (id, relMap) {\n                return hasProp(defined, makeModuleMap(id, relMap, false, true).id);\n            },\n\n            requireSpecified: function (id, relMap) {\n                id = makeModuleMap(id, relMap, false, true).id;\n                return hasProp(defined, id) || hasProp(registry, id);\n            },\n\n            require: function (deps, callback, errback, relMap) {\n                var moduleName, id, map, requireMod, args;\n                if (typeof deps === 'string') {\n                    if (isFunction(callback)) {\n                        //Invalid call\n                        return onError(makeError('requireargs', 'Invalid require call'), errback);\n                    }\n\n                    //Synchronous access to one module. If require.get is\n                    //available (as in the Node adapter), prefer that.\n                    //In this case deps is the moduleName and callback is\n                    //the relMap\n                    if (req.get) {\n                        return req.get(context, deps, callback);\n                    }\n\n                    //Just return the module wanted. In this scenario, the\n                    //second arg (if passed) is just the relMap.\n                    moduleName = deps;\n                    relMap = callback;\n\n                    //Normalize module name, if it contains . or ..\n                    map = makeModuleMap(moduleName, relMap, false, true);\n                    id = map.id;\n\n                    if (!hasProp(defined, id)) {\n                        return onError(makeError('notloaded', 'Module name \"' +\n                                    id +\n                                    '\" has not been loaded yet for context: ' +\n                                    contextName));\n                    }\n                    return defined[id];\n                }\n\n                //Callback require. Normalize args. if callback or errback is\n                //not a function, it means it is a relMap. Test errback first.\n                if (errback && !isFunction(errback)) {\n                    relMap = errback;\n                    errback = undefined;\n                }\n                if (callback && !isFunction(callback)) {\n                    relMap = callback;\n                    callback = undefined;\n                }\n\n                //Any defined modules in the global queue, intake them now.\n                takeGlobalQueue();\n\n                //Make sure any remaining defQueue items get properly processed.\n                while (defQueue.length) {\n                    args = defQueue.shift();\n                    if (args[0] === null) {\n                        return onError(makeError('mismatch', 'Mismatched anonymous define() module: ' + args[args.length - 1]));\n                    } else {\n                        //args are id, deps, factory. Should be normalized by the\n                        //define() function.\n                        callGetModule(args);\n                    }\n                }\n\n                //Mark all the dependencies as needing to be loaded.\n                requireMod = getModule(makeModuleMap(null, relMap));\n\n                requireMod.init(deps, callback, errback, {\n                    enabled: true\n                });\n\n                checkLoaded();\n\n                return context.require;\n            },\n\n            undef: function (id) {\n                //Bind any waiting define() calls to this context,\n                //fix for #408\n                takeGlobalQueue();\n\n                var map = makeModuleMap(id, null, true),\n                    mod = registry[id];\n\n                delete defined[id];\n                delete urlFetched[map.url];\n                delete undefEvents[id];\n\n                if (mod) {\n                    //Hold on to listeners in case the\n                    //module will be attempted to be reloaded\n                    //using a different config.\n                    if (mod.events.defined) {\n                        undefEvents[id] = mod.events;\n                    }\n\n                    removeWaiting(id);\n                }\n            },\n\n            /**\n             * Called to enable a module if it is still in the registry\n             * awaiting enablement. parent module is passed in for context,\n             * used by the optimizer.\n             */\n            enable: function (depMap, parent) {\n                var mod = registry[depMap.id];\n                if (mod) {\n                    getModule(depMap).enable();\n                }\n            },\n\n            /**\n             * Internal method used by environment adapters to complete a load event.\n             * A load event could be a script load or just a load pass from a synchronous\n             * load call.\n             * @param {String} moduleName the name of the module to potentially complete.\n             */\n            completeLoad: function (moduleName) {\n                var found, args, mod,\n                    shim = config.shim[moduleName] || {},\n                    shExports = shim.exports && shim.exports.exports;\n\n                takeGlobalQueue();\n\n                while (defQueue.length) {\n                    args = defQueue.shift();\n                    if (args[0] === null) {\n                        args[0] = moduleName;\n                        //If already found an anonymous module and bound it\n                        //to this name, then this is some other anon module\n                        //waiting for its completeLoad to fire.\n                        if (found) {\n                            break;\n                        }\n                        found = true;\n                    } else if (args[0] === moduleName) {\n                        //Found matching define call for this script!\n                        found = true;\n                    }\n\n                    callGetModule(args);\n                }\n\n                //Do this after the cycle of callGetModule in case the result\n                //of those calls/init calls changes the registry.\n                mod = registry[moduleName];\n\n                if (!found && !defined[moduleName] && mod && !mod.inited) {\n                    if (config.enforceDefine && (!shExports || !getGlobal(shExports))) {\n                        if (hasPathFallback(moduleName)) {\n                            return;\n                        } else {\n                            return onError(makeError('nodefine',\n                                             'No define call for ' + moduleName,\n                                             null,\n                                             [moduleName]));\n                        }\n                    } else {\n                        //A script that does not call define(), so just simulate\n                        //the call for it.\n                        callGetModule([moduleName, (shim.deps || []), shim.exports]);\n                    }\n                }\n\n                checkLoaded();\n            },\n\n            /**\n             * Converts a module name + .extension into an URL path.\n             * *Requires* the use of a module name. It does not support using\n             * plain URLs like nameToUrl.\n             */\n            toUrl: function (moduleNamePlusExt, relModuleMap) {\n                var index = moduleNamePlusExt.lastIndexOf('.'),\n                    ext = null;\n\n                if (index !== -1) {\n                    ext = moduleNamePlusExt.substring(index, moduleNamePlusExt.length);\n                    moduleNamePlusExt = moduleNamePlusExt.substring(0, index);\n                }\n\n                return context.nameToUrl(normalize(moduleNamePlusExt, relModuleMap && relModuleMap.id, true),\n                                         ext);\n            },\n\n            /**\n             * Converts a module name to a file path. Supports cases where\n             * moduleName may actually be just an URL.\n             * Note that it **does not** call normalize on the moduleName,\n             * it is assumed to have already been normalized. This is an\n             * internal API, not a public one. Use toUrl for the public API.\n             */\n            nameToUrl: function (moduleName, ext) {\n                var paths, pkgs, pkg, pkgPath, syms, i, parentModule, url,\n                    parentPath;\n\n                //If a colon is in the URL, it indicates a protocol is used and it is just\n                //an URL to a file, or if it starts with a slash, contains a query arg (i.e. ?)\n                //or ends with .js, then assume the user meant to use an url and not a module id.\n                //The slash is important for protocol-less URLs as well as full paths.\n                if (req.jsExtRegExp.test(moduleName)) {\n                    //Just a plain path, not module name lookup, so just return it.\n                    //Add extension if it is included. This is a bit wonky, only non-.js things pass\n                    //an extension, this method probably needs to be reworked.\n                    url = moduleName + (ext || '');\n                } else {\n                    //A module that needs to be converted to a path.\n                    paths = config.paths;\n                    pkgs = config.pkgs;\n\n                    syms = moduleName.split('/');\n                    //For each module name segment, see if there is a path\n                    //registered for it. Start with most specific name\n                    //and work up from it.\n                    for (i = syms.length; i > 0; i -= 1) {\n                        parentModule = syms.slice(0, i).join('/');\n                        pkg = pkgs[parentModule];\n                        parentPath = paths[parentModule];\n                        if (parentPath) {\n                            //If an array, it means there are a few choices,\n                            //Choose the one that is desired\n                            if (isArray(parentPath)) {\n                                parentPath = parentPath[0];\n                            }\n                            syms.splice(0, i, parentPath);\n                            break;\n                        } else if (pkg) {\n                            //If module name is just the package name, then looking\n                            //for the main module.\n                            if (moduleName === pkg.name) {\n                                pkgPath = pkg.location + '/' + pkg.main;\n                            } else {\n                                pkgPath = pkg.location;\n                            }\n                            syms.splice(0, i, pkgPath);\n                            break;\n                        }\n                    }\n\n                    //Join the path parts together, then figure out if baseUrl is needed.\n                    url = syms.join('/');\n                    url += (ext || (/\\?/.test(url) ? '' : '.js'));\n                    url = (url.charAt(0) === '/' || url.match(/^[\\w\\+\\.\\-]+:/) ? '' : config.baseUrl) + url;\n                }\n\n                return config.urlArgs ? url +\n                                        ((url.indexOf('?') === -1 ? '?' : '&') +\n                                         config.urlArgs) : url;\n            },\n\n            //Delegates to req.load. Broken out as a separate function to\n            //allow overriding in the optimizer.\n            load: function (id, url) {\n                req.load(context, id, url);\n            },\n\n            /**\n             * Executes a module callack function. Broken out as a separate function\n             * solely to allow the build system to sequence the files in the built\n             * layer in the right sequence.\n             *\n             * @private\n             */\n            execCb: function (name, callback, args, exports) {\n                return callback.apply(exports, args);\n            },\n\n            /**\n             * callback for script loads, used to check status of loading.\n             *\n             * @param {Event} evt the event from the browser for the script\n             * that was loaded.\n             */\n            onScriptLoad: function (evt) {\n                //Using currentTarget instead of target for Firefox 2.0's sake. Not\n                //all old browsers will be supported, but this one was easy enough\n                //to support and still makes sense.\n                if (evt.type === 'load' ||\n                        (readyRegExp.test((evt.currentTarget || evt.srcElement).readyState))) {\n                    //Reset interactive script so a script node is not held onto for\n                    //to long.\n                    interactiveScript = null;\n\n                    //Pull out the name of the module and the context.\n                    var data = getScriptData(evt);\n                    context.completeLoad(data.id);\n                }\n            },\n\n            /**\n             * Callback for script errors.\n             */\n            onScriptError: function (evt) {\n                var data = getScriptData(evt);\n                if (!hasPathFallback(data.id)) {\n                    return onError(makeError('scripterror', 'Script error', evt, [data.id]));\n                }\n            }\n        });\n    }\n\n    /**\n     * Main entry point.\n     *\n     * If the only argument to require is a string, then the module that\n     * is represented by that string is fetched for the appropriate context.\n     *\n     * If the first argument is an array, then it will be treated as an array\n     * of dependency string names to fetch. An optional function callback can\n     * be specified to execute when all of those dependencies are available.\n     *\n     * Make a local req variable to help Caja compliance (it assumes things\n     * on a require that are not standardized), and to give a short\n     * name for minification/local scope use.\n     */\n    req = requirejs = function (deps, callback, errback, optional) {\n\n        //Find the right context, use default\n        var context, config,\n            contextName = defContextName;\n\n        // Determine if have config object in the call.\n        if (!isArray(deps) && typeof deps !== 'string') {\n            // deps is a config object\n            config = deps;\n            if (isArray(callback)) {\n                // Adjust args if there are dependencies\n                deps = callback;\n                callback = errback;\n                errback = optional;\n            } else {\n                deps = [];\n            }\n        }\n\n        if (config && config.context) {\n            contextName = config.context;\n        }\n\n        context = contexts[contextName];\n        if (!context) {\n            context = contexts[contextName] = req.s.newContext(contextName);\n        }\n\n        if (config) {\n            context.configure(config);\n        }\n\n        return context.require(deps, callback, errback);\n    };\n\n    /**\n     * Support require.config() to make it easier to cooperate with other\n     * AMD loaders on globally agreed names.\n     */\n    req.config = function (config) {\n        return req(config);\n    };\n\n    /**\n     * Export require as a global, but only if it does not already exist.\n     */\n    if (!require) {\n        require = req;\n    }\n\n    req.version = version;\n\n    //Used to filter out dependencies that are already paths.\n    req.jsExtRegExp = /^\\/|:|\\?|\\.js$/;\n    req.isBrowser = isBrowser;\n    s = req.s = {\n        contexts: contexts,\n        newContext: newContext\n    };\n\n    //Create default context.\n    req({});\n\n    //Exports some context-sensitive methods on global require, using\n    //default context if no context specified.\n    addRequireMethods(req);\n\n    if (isBrowser) {\n        head = s.head = document.getElementsByTagName('head')[0];\n        //If BASE tag is in play, using appendChild is a problem for IE6.\n        //When that browser dies, this can be removed. Details in this jQuery bug:\n        //http://dev.jquery.com/ticket/2709\n        baseElement = document.getElementsByTagName('base')[0];\n        if (baseElement) {\n            head = s.head = baseElement.parentNode;\n        }\n    }\n\n    /**\n     * Any errors that require explicitly generates will be passed to this\n     * function. Intercept/override it if you want custom error handling.\n     * @param {Error} err the error object.\n     */\n    req.onError = function (err) {\n        throw err;\n    };\n\n    /**\n     * Does the request to load a module for the browser case.\n     * Make this a separate function to allow other environments\n     * to override it.\n     *\n     * @param {Object} context the require context to find state.\n     * @param {String} moduleName the name of the module.\n     * @param {Object} url the URL to the module.\n     */\n    req.load = function (context, moduleName, url) {\n        var config = (context && context.config) || {},\n            node;\n        if (isBrowser) {\n            //In the browser so use a script tag\n            node = config.xhtml ?\n                    document.createElementNS('http://www.w3.org/1999/xhtml', 'html:script') :\n                    document.createElement('script');\n            node.type = config.scriptType || 'text/javascript';\n            node.charset = 'utf-8';\n            node.async = true;\n\n            node.setAttribute('data-requirecontext', context.contextName);\n            node.setAttribute('data-requiremodule', moduleName);\n\n            //Set up load listener. Test attachEvent first because IE9 has\n            //a subtle issue in its addEventListener and script onload firings\n            //that do not match the behavior of all other browsers with\n            //addEventListener support, which fire the onload event for a\n            //script right after the script execution. See:\n            //https://connect.microsoft.com/IE/feedback/details/648057/script-onload-event-is-not-fired-immediately-after-script-execution\n            //UNFORTUNATELY Opera implements attachEvent but does not follow the script\n            //script execution mode.\n            if (node.attachEvent &&\n                    //Check if node.attachEvent is artificially added by custom script or\n                    //natively supported by browser\n                    //read https://github.com/jrburke/requirejs/issues/187\n                    //if we can NOT find [native code] then it must NOT natively supported.\n                    //in IE8, node.attachEvent does not have toString()\n                    //Note the test for \"[native code\" with no closing brace, see:\n                    //https://github.com/jrburke/requirejs/issues/273\n                    !(node.attachEvent.toString && node.attachEvent.toString().indexOf('[native code') < 0) &&\n                    !isOpera) {\n                //Probably IE. IE (at least 6-8) do not fire\n                //script onload right after executing the script, so\n                //we cannot tie the anonymous define call to a name.\n                //However, IE reports the script as being in 'interactive'\n                //readyState at the time of the define call.\n                useInteractive = true;\n\n                node.attachEvent('onreadystatechange', context.onScriptLoad);\n                //It would be great to add an error handler here to catch\n                //404s in IE9+. However, onreadystatechange will fire before\n                //the error handler, so that does not help. If addEvenListener\n                //is used, then IE will fire error before load, but we cannot\n                //use that pathway given the connect.microsoft.com issue\n                //mentioned above about not doing the 'script execute,\n                //then fire the script load event listener before execute\n                //next script' that other browsers do.\n                //Best hope: IE10 fixes the issues,\n                //and then destroys all installs of IE 6-9.\n                //node.attachEvent('onerror', context.onScriptError);\n            } else {\n                node.addEventListener('load', context.onScriptLoad, false);\n                node.addEventListener('error', context.onScriptError, false);\n            }\n            node.src = url;\n\n            //For some cache cases in IE 6-8, the script executes before the end\n            //of the appendChild execution, so to tie an anonymous define\n            //call to the module name (which is stored on the node), hold on\n            //to a reference to this node, but clear after the DOM insertion.\n            currentlyAddingScript = node;\n            if (baseElement) {\n                head.insertBefore(node, baseElement);\n            } else {\n                head.appendChild(node);\n            }\n            currentlyAddingScript = null;\n\n            return node;\n        } else if (isWebWorker) {\n            //In a web worker, use importScripts. This is not a very\n            //efficient use of importScripts, importScripts will block until\n            //its script is downloaded and evaluated. However, if web workers\n            //are in play, the expectation that a build has been done so that\n            //only one script needs to be loaded anyway. This may need to be\n            //reevaluated if other use cases become common.\n            importScripts(url);\n\n            //Account for anonymous modules\n            context.completeLoad(moduleName);\n        }\n    };\n\n    function getInteractiveScript() {\n        if (interactiveScript && interactiveScript.readyState === 'interactive') {\n            return interactiveScript;\n        }\n\n        eachReverse(scripts(), function (script) {\n            if (script.readyState === 'interactive') {\n                return (interactiveScript = script);\n            }\n        });\n        return interactiveScript;\n    }\n\n    //Look for a data-main script attribute, which could also adjust the baseUrl.\n    if (isBrowser) {\n        //Figure out baseUrl. Get it from the script tag with require.js in it.\n        eachReverse(scripts(), function (script) {\n            //Set the 'head' where we can append children by\n            //using the script's parent.\n            if (!head) {\n                head = script.parentNode;\n            }\n\n            //Look for a data-main attribute to set main script for the page\n            //to load. If it is there, the path to data main becomes the\n            //baseUrl, if it is not already set.\n            dataMain = script.getAttribute('data-main');\n            if (dataMain) {\n                //Set final baseUrl if there is not already an explicit one.\n                if (!cfg.baseUrl) {\n                    //Pull off the directory of data-main for use as the\n                    //baseUrl.\n                    src = dataMain.split('/');\n                    mainScript = src.pop();\n                    subPath = src.length ? src.join('/')  + '/' : './';\n\n                    cfg.baseUrl = subPath;\n                    dataMain = mainScript;\n                }\n\n                //Strip off any trailing .js since dataMain is now\n                //like a module name.\n                dataMain = dataMain.replace(jsSuffixRegExp, '');\n\n                //Put the data-main script in the files to load.\n                cfg.deps = cfg.deps ? cfg.deps.concat(dataMain) : [dataMain];\n\n                return true;\n            }\n        });\n    }\n\n    /**\n     * The function that handles definitions of modules. Differs from\n     * require() in that a string for the module should be the first argument,\n     * and the function to execute after dependencies are loaded should\n     * return a value to define the module corresponding to the first argument's\n     * name.\n     */\n    define = function (name, deps, callback) {\n        var node, context;\n\n        //Allow for anonymous functions\n        if (typeof name !== 'string') {\n            //Adjust args appropriately\n            callback = deps;\n            deps = name;\n            name = null;\n        }\n\n        //This module may not have dependencies\n        if (!isArray(deps)) {\n            callback = deps;\n            deps = [];\n        }\n\n        //If no name, and callback is a function, then figure out if it a\n        //CommonJS thing with dependencies.\n        if (!deps.length && isFunction(callback)) {\n            //Remove comments from the callback string,\n            //look for require calls, and pull them into the dependencies,\n            //but only if there are function args.\n            if (callback.length) {\n                callback\n                    .toString()\n                    .replace(commentRegExp, '')\n                    .replace(cjsRequireRegExp, function (match, dep) {\n                        deps.push(dep);\n                    });\n\n                //May be a CommonJS thing even without require calls, but still\n                //could use exports, and module. Avoid doing exports and module\n                //work though if it just needs require.\n                //REQUIRES the function to expect the CommonJS variables in the\n                //order listed below.\n                deps = (callback.length === 1 ? ['require'] : ['require', 'exports', 'module']).concat(deps);\n            }\n        }\n\n        //If in IE 6-8 and hit an anonymous define() call, do the interactive\n        //work.\n        if (useInteractive) {\n            node = currentlyAddingScript || getInteractiveScript();\n            if (node) {\n                if (!name) {\n                    name = node.getAttribute('data-requiremodule');\n                }\n                context = contexts[node.getAttribute('data-requirecontext')];\n            }\n        }\n\n        //Always save off evaluating the def call until the script onload handler.\n        //This allows multiple modules to be in a file without prematurely\n        //tracing dependencies, and allows for anonymous module support,\n        //where the module name is not known until the script onload event\n        //occurs. If no context, use the global queue, and get it processed\n        //in the onscript load callback.\n        (context ? context.defQueue : globalDefQueue).push([name, deps, callback]);\n    };\n\n    define.amd = {\n        jQuery: true\n    };\n\n\n    /**\n     * Executes the text. Normally just uses eval, but can be modified\n     * to use a better, environment-specific call. Only used for transpiling\n     * loader plugins, not for plain JS modules.\n     * @param {String} text the text to execute/evaluate.\n     */\n    req.exec = function (text) {\n        /*jslint evil: true */\n        return eval(text);\n    };\n\n    //Set up with config info.\n    req(cfg);\n}(this));\n"]],"start1":23,"start2":23,"length1":81745,"length2":80353}]],"length":80376,"saved":false}
