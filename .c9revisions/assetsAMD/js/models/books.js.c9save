{"ts":1341332995581,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"// books.js: Ted Killilea June 2012  @t2k_nyc  model\ndefine(['require', 'jquery', 'underscore', 'backbone', 'app'], function(require, $, _, Backbone, MyApp) {\n    'use strict';\n\n    // private\n    var Book = Backbone.Model.extend();\n\n    // public API for this module\n    return Backbone.Collection.extend({\n        model: Book,\n\n        initialize: function() {\n            var self = this;\n            _.bindAll(this, \"search\", \"moreBooks\");\n\n            MyApp.vent.on(\"search:term\", function(term) {\n                self.search(term);\n            });\n\n            MyApp.vent.on(\"search:more\", function() {\n                self.moreBooks();\n            });\n\n            // the number of books we fetch each time\n            this.maxResults = 40;\n            // the results \"page\" we last fetched\n            this.page = 0;\n\n            // flags whether the collection is currently in the process of fetching\n            // more results from the API (to avoid multiple simultaneous calls\n            this.loading = false;\n\n            // remember the previous search\n            this.previousSearch = null;\n            // the maximum number of results for the previous search\n            this.totalItems = null;\n        },\n\n        search: function(searchTerm) {\n            this.page = 0;\n\n            var self = this;\n            this.fetchBooks(searchTerm, function(books) {\n                if (books.length < 1) {\n                    MyApp.vent.trigger(\"search:noResults\");\n                }\n                else {\n                    self.reset(books);\n                }\n            });\n\n            this.previousSearch = searchTerm;\n        },\n\n        moreBooks: function() {\n            // if we've loaded all the books for this search, there are no more to load !\n            if (this.length >= this.totalItems) {\n                return true;\n            }\n\n            var self = this;\n            this.fetchBooks(this.previousSearch, function(books) {\n                self.add(books);\n            });\n        },\n\n        fetchBooks: function(searchTerm, callback) {\n            if (this.loading) return true;\n\n            this.loading = true;\n\n            var self = this;\n            MyApp.vent.trigger(\"search:start\");\n\n            var query = encodeURIComponent(searchTerm) + '&maxResults=' + this.maxResults + '&startIndex=' + (this.page * this.maxResults) + '&fields=totalItems,items(id,volumeInfo/title,volumeInfo/subtitle,volumeInfo/authors,volumeInfo/publishedDate,volumeInfo/description,volumeInfo/imageLinks)';\n\n            $.ajax({\n                url: 'https://www.googleapis.com/books/v1/volumes',\n                dataType: 'jsonp',\n                data: 'q=' + query,\n                success: function(res) {\n                    MyApp.vent.trigger(\"search:stop\");\n                    if (res.totalItems === 0) {\n                        callback([]);\n                        return [];\n                    }\n                    if (res.items) {\n                        self.page++;\n                        self.totalItems = res.totalItems;\n                        var searchResults = [];\n                        _.each(res.items, function(item) {\n                            var thumbnail = null;\n                            if (item.volumeInfo && item.volumeInfo.imageLinks && item.volumeInfo.imageLinks.thumbnail) {\n                                thumbnail = item.volumeInfo.imageLinks.thumbnail;\n                            }\n                            searchResults[searchResults.length] = new Book({\n                                thumbnail: thumbnail,\n                                title: item.volumeInfo.title,\n                                subtitle: item.volumeInfo.subtitle,\n                                description: item.volumeInfo.description,\n                                googleId: item.id\n                            });\n                        });\n                        callback(searchResults);\n                        self.loading = false;\n                        return searchResults;\n                    }\n                    else if (res.error) {\n                        MyApp.vent.trigger(\"search:error\");\n                        self.loading = false;\n                    }\n                }\n            });\n        }\n    });\n\n});"]],"start1":0,"start2":0,"length1":0,"length2":4289}]],"length":4289}
