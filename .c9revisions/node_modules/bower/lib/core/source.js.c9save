{"ts":1353805441790,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"// ==========================================\n// BOWER: Source Api\n// ==========================================\n// Copyright 2012 Twitter, Inc\n// Licensed under The MIT License\n// http://opensource.org/licenses/MIT\n// ==========================================\n\nvar request  = require('request');\nvar config   = require('./config');\n\nvar endpoint = config.endpoint + '/packages';\n\nif (process.env.HTTP_PROXY) {\n  request = request.defaults({'proxy': process.env.HTTP_PROXY});\n}\n\nexports.lookup = function (name, callback) {\n  request.get(endpoint + '/' + encodeURIComponent(name), function (err, response, body) {\n    if (err || response.statusCode !== 200) return callback(err || new Error(name + ' not found'));\n    callback(err, body && JSON.parse(body).url);\n  });\n};\n\nexports.register = function (name, url, callback) {\n  var body = {name: name, url: url};\n\n  request.post({url: endpoint, form: body}, function (err, response) {\n    if (err) return callback(err);\n\n    if (response.statusCode === 406) {\n      return callback(new Error('Duplicate package'));\n    }\n\n    if (response.statusCode === 400) {\n      return callback(new Error('Incorrect format'));\n    }\n\n    if (response.statusCode !== 201) {\n      return callback(new Error('Unknown error: ' + response.statusCode));\n    }\n\n    callback();\n  });\n};\n\nexports.search = function (name, callback) {\n  request.get(endpoint + '/search/' + encodeURIComponent(name), function (err, response, body) {\n    callback(err, body && JSON.parse(body));\n  });\n};\n\nexports.info = function (name, callback) {\n  exports.lookup(name, function (err, url) {\n    if (err) return callback(err);\n\n    var Package = require('./package');\n    var pkg     = new Package(name, url);\n\n    pkg.once('resolve', function () {\n      pkg.once('versions', function (versions) {\n        callback(null, { pkg: pkg, versions: versions });\n      }).versions();\n    }).resolve();\n  });\n};\n\nexports.all = function (callback) {\n  request.get(endpoint, function (err, response, body) {\n    callback(err, body && JSON.parse(body));\n  });\n};\n"]],"start1":0,"start2":0,"length1":0,"length2":2064}]],"length":2064}
