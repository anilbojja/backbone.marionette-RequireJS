{"ts":1355693140622,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"// Backbone.BabySitter, v0.0.4\n// Copyright (c)2012 Derick Bailey, Muted Solutions, LLC.\n// Distributed under MIT license\n// http://github.com/marionettejs/backbone.babysitter\n(function (root, factory) {\n  if (typeof exports === 'object') {\n\n    var underscore = require('underscore');\n    var backbone = require('backbone');\n\n    module.exports = factory(underscore, backbone);\n\n  } else if (typeof define === 'function' && define.amd) {\n\n    define(['underscore', 'backbone'], factory);\n\n  } \n}(this, function (_, Backbone) {\n  \"option strict\";\n\n  // Backbone.ChildViewContainer\n  // ---------------------------\n  //\n  // Provide a container to store, retrieve and\n  // shut down child views.\n  \n  Backbone.ChildViewContainer = (function(Backbone, _){\n    \n    // Container Constructor\n    // ---------------------\n  \n    var Container = function(initialViews){\n      this._views = {};\n      this._indexByModel = {};\n      this._indexByCollection = {};\n      this._indexByCustom = {};\n      this._updateLength();\n  \n      this._addInitialViews(initialViews);\n    };\n  \n    // Container Methods\n    // -----------------\n  \n    _.extend(Container.prototype, {\n  \n      // Add a view to this container. Stores the view\n      // by `cid` and makes it searchable by the model\n      // and/or collection of the view. Optionally specify\n      // a custom key to store an retrieve the view.\n      add: function(view, customIndex){\n        var viewCid = view.cid;\n  \n        // store the view\n        this._views[viewCid] = view;\n  \n        // index it by model\n        if (view.model){\n          this._indexByModel[view.model.cid] = viewCid;\n        }\n  \n        // index it by collection\n        if (view.collection){\n          this._indexByCollection[view.collection.cid] = viewCid;\n        }\n  \n        // index by custom\n        if (customIndex){\n          this._indexByCustom[customIndex] = viewCid;\n        }\n  \n        this._updateLength();\n      },\n  \n      // Find a view by the model that was attached to\n      // it. Uses the model's `cid` to find it, and\n      // retrieves the view by it's `cid` from the result\n      findByModel: function(model){\n        var viewCid = this._indexByModel[model.cid];\n        return this.findByCid(viewCid);\n      },\n  \n      // Find a view by the collection that was attached to\n      // it. Uses the collection's `cid` to find it, and\n      // retrieves the view by it's `cid` from the result\n      findByCollection: function(col){\n        var viewCid = this._indexByCollection[col.cid];\n        return this.findByCid(viewCid);\n      },\n  \n      // Find a view by a custom indexer.\n      findByCustom: function(index){\n        var viewCid = this._indexByCustom[index];\n        return this.findByCid(viewCid);\n      },\n  \n      // Find by index. This is not guaranteed to be a\n      // stable index.\n      findByIndex: function(index){\n        return _.values(this._views)[index];\n      },\n  \n      // retrieve a view by it's `cid` directly\n      findByCid: function(cid){\n        return this._views[cid];\n      },\n  \n      // Remove a view\n      remove: function(view){\n        var viewCid = view.cid;\n  \n        // delete model index\n        if (view.model){\n          delete this._indexByModel[view.model.cid];\n        }\n  \n        // delete collection index\n        if (view.collection){\n          delete this._indexByCollection[view.collection.cid];\n        }\n  \n        // delete custom index\n        var cust;\n  \n        for (var key in this._indexByCustom){\n          if (this._indexByCustom.hasOwnProperty(key)){\n            if (this._indexByCustom[key] === viewCid){\n              cust = key;\n              break;\n            }\n          }\n        }\n  \n        if (cust){\n          delete this._indexByCustom[cust];\n        }\n  \n        // remove the view from the container\n        delete this._views[viewCid];\n  \n        // update the length\n        this._updateLength();\n      },\n  \n      // Call a method on every view in the container,\n      // passing parameters to the call method one at a\n      // time, like `function.call`.\n      call: function(method, args){\n        args = Array.prototype.slice.call(arguments, 1);\n        this.apply(method, args);\n      },\n  \n      // Apply a method on every view in the container,\n      // passing parameters to the call method one at a\n      // time, like `function.apply`.\n      apply: function(method, args){\n        var view;\n  \n        // fix for IE < 9\n        args = args || [];\n  \n        _.each(this._views, function(view, key){\n          if (_.isFunction(view[method])){\n            view[method].apply(view, args);\n          }\n        });\n  \n      },\n  \n      // Update the `.length` attribute on this container\n      _updateLength: function(){\n        this.length = _.size(this._views);\n      },\n  \n      // set up an initial list of views\n      _addInitialViews: function(views){\n        if (!views){ return; }\n  \n        var view, i,\n            length = views.length;\n  \n        for (i=0; i<length; i++){\n          view = views[i];\n          this.add(view);\n        }\n      }\n    });\n  \n    // Borrowing this code from Backbone.Collection:\n    // http://backbonejs.org/docs/backbone.html#section-106\n    //\n    // Mix in methods from Underscore, for iteration, and other\n    // collection related features.\n    var methods = ['forEach', 'each', 'map', 'find', 'detect', 'filter', \n      'select', 'reject', 'every', 'all', 'some', 'any', 'include', \n      'contains', 'invoke', 'toArray', 'first', 'initial', 'rest', \n      'last', 'without', 'isEmpty', 'pluck'];\n  \n    _.each(methods, function(method) {\n      Container.prototype[method] = function() {\n        var views = _.values(this._views);\n        var args = [views].concat(_.toArray(arguments));\n        return _[method].apply(_, args);\n      };\n    });\n  \n    // return the public API\n    return Container;\n  })(Backbone, _);\n  \n  return Backbone.ChildViewContainer; \n\n}));\n"]],"start1":0,"start2":0,"length1":0,"length2":5947}]],"length":5947}
